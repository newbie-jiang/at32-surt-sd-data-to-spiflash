<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\gui_lcd_mcu.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\gui_lcd_mcu.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Mon Aug 05 08:37:45 2024
<BR><P>
<H3>Maximum Stack Usage =       9400 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; application &rArr; copy_file_to_qspi_flash &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_write_disk &rArr; sd_mult_blocks_write &rArr; sdio_command_data_send &rArr; sd_init &rArr; speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[60]">ACC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[60]">ACC_IRQHandler</a><BR>
 <LI><a href="#[6]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">BusFault_Handler</a><BR>
 <LI><a href="#[4]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">HardFault_Handler</a><BR>
 <LI><a href="#[5]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">UsageFault_Handler</a><BR>
 <LI><a href="#[199]">_gt_event_send_kernel</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[199]">_gt_event_send_kernel</a><BR>
 <LI><a href="#[143]">_destroy_and_free_children</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[143]">_destroy_and_free_children</a><BR>
 <LI><a href="#[1c3]">_gt_obj_foreach_clicked</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c3]">_gt_obj_foreach_clicked</a><BR>
 <LI><a href="#[165]">_find_showing_recursive_by_type</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[165]">_find_showing_recursive_by_type</a><BR>
 <LI><a href="#[1c7]">_gt_obj_prev_focus_get</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c7]">_gt_obj_prev_focus_get</a><BR>
 <LI><a href="#[1c6]">_gt_obj_next_focus_get</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c6]">_gt_obj_next_focus_get</a><BR>
 <LI><a href="#[1c2]">_gt_obj_focus_clicked</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c2]">_gt_obj_focus_clicked</a><BR>
 <LI><a href="#[1c5]">_gt_obj_move_child_by</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c5]">_gt_obj_move_child_by</a><BR>
 <LI><a href="#[1fa]">_row_grow_inside_invert</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1fa]">_row_grow_inside_invert</a><BR>
 <LI><a href="#[1f5]">_row_grow_inside</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f5]">_row_grow_inside</a><BR>
 <LI><a href="#[1be]">gt_obj_child_set_prop</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1be]">gt_obj_child_set_prop</a><BR>
 <LI><a href="#[118]">_calc_max_area_recursive</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[118]">_calc_max_area_recursive</a><BR>
 <LI><a href="#[122]">_check_and_copy_foreach</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[122]">_check_and_copy_foreach</a><BR>
 <LI><a href="#[394]">sd_switch</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[374]">sdio_command_data_send</a><BR>
 <LI><a href="#[239]">color_tree_cleanup</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[239]">color_tree_cleanup</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[60]">ACC_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[1e]">ADC1_2_3_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[6]">BusFault_Handler</a> from at32f435_437_int.o(i.BusFault_Handler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[20]">CAN1_RX0_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[21]">CAN1_RX1_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[22]">CAN1_SE_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[1f]">CAN1_TX_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[4c]">CAN2_RX0_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[4d]">CAN2_RX1_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[4e]">CAN2_SE_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[4b]">CAN2_TX_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[11]">CRM_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[44]">DMA1_Channel1_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[45]">DMA1_Channel2_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[46]">DMA1_Channel3_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[47]">DMA1_Channel4_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[48]">DMA1_Channel5_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[50]">DMA1_Channel6_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[51]">DMA1_Channel7_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[65]">DMA2_Channel1_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[66]">DMA2_Channel2_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[67]">DMA2_Channel3_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[68]">DMA2_Channel4_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[69]">DMA2_Channel5_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[6a]">DMA2_Channel6_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[6b]">DMA2_Channel7_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[5e]">DMAMUX_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[57]">DVP_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[9]">DebugMon_Handler</a> from at32f435_437_int.o(i.DebugMon_Handler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[17]">EDMA_Stream1_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[18]">EDMA_Stream2_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[19]">EDMA_Stream3_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[1a]">EDMA_Stream4_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[1b]">EDMA_Stream5_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[1c]">EDMA_Stream6_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[1d]">EDMA_Stream7_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[3b]">EDMA_Stream8_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[49]">EMAC_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[4a]">EMAC_WKUP_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[35]">ERTCAlarm_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[f]">ERTC_WKUP_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[12]">EXINT0_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[34]">EXINT15_10_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[13]">EXINT1_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[14]">EXINT2_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[15]">EXINT3_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[16]">EXINT4_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[23]">EXINT9_5_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[10]">FLASH_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[58]">FPU_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[b7]">GT_GetVec</a> from gt_gui_driver.o(.text) referenced from gt_gui_driver.o(.rodata.gt_get_font_func)
 <LI><a href="#[4]">HardFault_Handler</a> from at32f435_437_int.o(i.HardFault_Handler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[2c]">I2C1_ERR_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[2b]">I2C1_EVT_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[2e]">I2C2_ERR_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[2d]">I2C2_EVT_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[54]">I2C3_ERR_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[53]">I2C3_EVT_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[5]">MemManage_Handler</a> from at32f435_437_int.o(i.MemManage_Handler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[3]">NMI_Handler</a> from at32f435_437_int.o(i.NMI_Handler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[4f]">OTGFS1_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[36]">OTGFS1_WKUP_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[56]">OTGFS2_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[55]">OTGFS2_WKUP_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[d]">PVM_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from at32f435_437_int.o(i.PendSV_Handler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[5d]">QSPI1_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[5c]">QSPI2_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[2]">Reset_Handler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[3d]">SDIO1_IRQHandler</a> from at_surf_f437_board_sd_card.o(i.SDIO1_IRQHandler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[5f]">SDIO2_IRQHandler</a> from at_surf_f437_board_sd_card.o(i.SDIO2_IRQHandler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[2f]">SPI1_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[30]">SPI2_I2S2EXT_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[3f]">SPI3_I2S3EXT_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[5b]">SPI4_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from at32f435_437_int.o(i.SVC_Handler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[70]">ScanDownLeft</a> from gt_gui_driver.o(.text) referenced from gt_gui_driver.o(.text)
 <LI><a href="#[74]">ScanDownLeft_V</a> from gt_gui_driver.o(.text) referenced from gt_gui_driver.o(.text)
 <LI><a href="#[6f]">ScanDownRight</a> from gt_gui_driver.o(.text) referenced from gt_gui_driver.o(.text)
 <LI><a href="#[73]">ScanDownRight_V</a> from gt_gui_driver.o(.text) referenced from gt_gui_driver.o(.text)
 <LI><a href="#[71]">ScanUpperLeft</a> from gt_gui_driver.o(.text) referenced from gt_gui_driver.o(.text)
 <LI><a href="#[75]">ScanUpperLeft_V</a> from gt_gui_driver.o(.text) referenced from gt_gui_driver.o(.text)
 <LI><a href="#[72]">ScanUpperRight</a> from gt_gui_driver.o(.text) referenced 2 times from gt_gui_driver.o(.text)
 <LI><a href="#[76]">ScanUpperRight_V</a> from gt_gui_driver.o(.text) referenced 2 times from gt_gui_driver.o(.text)
 <LI><a href="#[b]">SysTick_Handler</a> from at32f435_437_int.o(i.SysTick_Handler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[6d]">SystemInit</a> from system_at32f435_437.o(i.SystemInit) referenced from startup_at32f435_437.o(.text)
 <LI><a href="#[e]">TAMP_STAMP_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[24]">TMR1_BRK_TMR9_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[27]">TMR1_CH_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[25]">TMR1_OVF_TMR10_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[26]">TMR1_TRG_HALL_TMR11_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[61]">TMR20_BRK_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[64]">TMR20_CH_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[62]">TMR20_OVF_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[63]">TMR20_TRG_HALL_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[28]">TMR2_GLOBAL_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[29]">TMR3_GLOBAL_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[2a]">TMR4_GLOBAL_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[3e]">TMR5_GLOBAL_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[42]">TMR6_DAC_GLOBAL_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[43]">TMR7_GLOBAL_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[37]">TMR8_BRK_TMR12_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[3a]">TMR8_CH_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[38]">TMR8_OVF_TMR13_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[39]">TMR8_TRG_HALL_TMR14_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[40]">UART4_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[41]">UART5_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[59]">UART7_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[5a]">UART8_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[31]">USART1_IRQHandler</a> from bsp_uart.o(i.USART1_IRQHandler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[32]">USART2_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[33]">USART3_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[52]">USART6_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[7]">UsageFault_Handler</a> from at32f435_437_int.o(i.UsageFault_Handler) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[c]">WWDT_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[3c]">XMC_IRQHandler</a> from startup_at32f435_437.o(.text) referenced from startup_at32f435_437.o(RESET)
 <LI><a href="#[6e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_at32f435_437.o(.text)
 <LI><a href="#[a3]">_close_cb</a> from gt_hal_src.o(i._close_cb) referenced from gt_hal_src.o(i.gt_src_init)
 <LI><a href="#[a8]">_close_cb</a> from gt_hal_vf.o(i._close_cb) referenced from gt_hal_vf.o(i.gt_vf_init)
 <LI><a href="#[ae]">_deinit_cb</a> from gt_img.o(i._deinit_cb) referenced 2 times from gt_img.o(.constdata)
 <LI><a href="#[9d]">_equal_current_id_cb</a> from gt_scr_stack.o(i._equal_current_id_cb) referenced from gt_scr_stack.o(i.gt_scr_stack_has_before)
 <LI><a href="#[af]">_event_cb</a> from gt_img.o(i._event_cb) referenced 2 times from gt_img.o(.constdata)
 <LI><a href="#[98]">_flush_cb</a> from main.o(i._flush_cb) referenced from gt_port_disp.o(i.gt_port_disp_init)
 <LI><a href="#[9c]">_free_alive_scr_object_cb</a> from gt_scr_stack.o(i._free_alive_scr_object_cb) referenced from gt_scr_stack.o(i.gt_scr_stack_clear)
 <LI><a href="#[86]">_gt_anim_path_bounce</a> from gt_anim.o(i._gt_anim_path_bounce) referenced from gt_anim.o(i.gt_anim_set_path_type)
 <LI><a href="#[82]">_gt_anim_path_ease_in</a> from gt_anim.o(i._gt_anim_path_ease_in) referenced from gt_anim.o(i.gt_anim_set_path_type)
 <LI><a href="#[84]">_gt_anim_path_ease_in_out</a> from gt_anim.o(i._gt_anim_path_ease_in_out) referenced from gt_anim.o(i.gt_anim_set_path_type)
 <LI><a href="#[83]">_gt_anim_path_ease_out</a> from gt_anim.o(i._gt_anim_path_ease_out) referenced from gt_anim.o(i.gt_anim_set_path_type)
 <LI><a href="#[81]">_gt_anim_path_linear</a> from gt_anim.o(i._gt_anim_path_linear) referenced from gt_anim.o(i.gt_anim_init)
 <LI><a href="#[81]">_gt_anim_path_linear</a> from gt_anim.o(i._gt_anim_path_linear) referenced from gt_anim.o(i.gt_anim_set_path_type)
 <LI><a href="#[85]">_gt_anim_path_overshoot</a> from gt_anim.o(i._gt_anim_path_overshoot) referenced from gt_anim.o(i.gt_anim_set_path_type)
 <LI><a href="#[87]">_gt_anim_path_step</a> from gt_anim.o(i._gt_anim_path_step) referenced from gt_anim.o(i.gt_anim_set_path_type)
 <LI><a href="#[79]">_gt_anim_task_handler</a> from gt_anim.o(i._gt_anim_task_handler) referenced from gt_anim.o(i._gt_anim_core_init)
 <LI><a href="#[88]">_gt_disp_task_handler</a> from gt_hal_disp.o(i._gt_disp_task_handler) referenced from gt_hal_disp.o(i.gt_disp_drv_register)
 <LI><a href="#[7d]">_gt_img_decoder_built_in_close</a> from gt_img_decoder.o(i._gt_img_decoder_built_in_close) referenced from gt_img_decoder.o(i._gt_img_decoder_init)
 <LI><a href="#[7a]">_gt_img_decoder_built_in_info</a> from gt_img_decoder.o(i._gt_img_decoder_built_in_info) referenced from gt_img_decoder.o(i._gt_img_decoder_init)
 <LI><a href="#[7b]">_gt_img_decoder_built_in_open</a> from gt_img_decoder.o(i._gt_img_decoder_built_in_open) referenced from gt_img_decoder.o(i._gt_img_decoder_init)
 <LI><a href="#[7c]">_gt_img_decoder_built_in_read_line</a> from gt_img_decoder.o(i._gt_img_decoder_built_in_read_line) referenced from gt_img_decoder.o(i._gt_img_decoder_init)
 <LI><a href="#[90]">_gt_obj_destroy_handler_cb</a> from gt_obj.o(i._gt_obj_destroy_handler_cb) referenced from gt_obj.o(i.gt_obj_destroy)
 <LI><a href="#[97]">_gt_png_close</a> from gt_png.o(i._gt_png_close) referenced from gt_png.o(i.gt_png_init)
 <LI><a href="#[94]">_gt_png_info</a> from gt_png.o(i._gt_png_info) referenced from gt_png.o(i.gt_png_init)
 <LI><a href="#[95]">_gt_png_open</a> from gt_png.o(i._gt_png_open) referenced from gt_png.o(i.gt_png_init)
 <LI><a href="#[96]">_gt_png_read_line</a> from gt_png.o(i._gt_png_read_line) referenced from gt_png.o(i.gt_png_init)
 <LI><a href="#[a1]">_gt_sjpg_close</a> from gt_sjpg.o(i._gt_sjpg_close) referenced from gt_sjpg.o(i.gt_sjpg_init)
 <LI><a href="#[9e]">_gt_sjpg_info</a> from gt_sjpg.o(i._gt_sjpg_info) referenced from gt_sjpg.o(i.gt_sjpg_init)
 <LI><a href="#[9f]">_gt_sjpg_open</a> from gt_sjpg.o(i._gt_sjpg_open) referenced from gt_sjpg.o(i.gt_sjpg_init)
 <LI><a href="#[a0]">_gt_sjpg_read_line</a> from gt_sjpg.o(i._gt_sjpg_read_line) referenced from gt_sjpg.o(i.gt_sjpg_init)
 <LI><a href="#[7f]">_indev_scroll_throw_exec_cb</a> from gt_indev.o(i._indev_scroll_throw_exec_cb) referenced from gt_indev.o(i._indev_scroll_throw_handler_anim_start)
 <LI><a href="#[80]">_indev_scroll_throw_ready_cb</a> from gt_indev.o(i._indev_scroll_throw_ready_cb) referenced from gt_indev.o(i._indev_scroll_throw_handler_anim_start)
 <LI><a href="#[ad]">_init_cb</a> from gt_img.o(i._init_cb) referenced 3 times from gt_img.o(.constdata)
 <LI><a href="#[b1]">_obj_event_cb</a> from gt_obj.o(i._obj_event_cb) referenced from gt_obj.o(.constdata)
 <LI><a href="#[8a]">_old_scr_anim_ready_cb</a> from gt_disp.o(i._old_scr_anim_ready_cb) referenced from gt_disp.o(i.gt_disp_load_scr_anim)
 <LI><a href="#[a2]">_open_cb</a> from gt_hal_src.o(i._open_cb) referenced from gt_hal_src.o(i.gt_src_init)
 <LI><a href="#[a7]">_open_cb</a> from gt_hal_vf.o(i._open_cb) referenced from gt_hal_vf.o(i.gt_vf_init)
 <LI><a href="#[a4]">_read_cb</a> from gt_hal_src.o(i._read_cb) referenced from gt_hal_src.o(i.gt_src_init)
 <LI><a href="#[a9]">_read_cb</a> from gt_hal_vf.o(i._read_cb) referenced from gt_hal_vf.o(i.gt_vf_init)
 <LI><a href="#[89]">_scr_anim_del_ready_cb</a> from gt_disp.o(i._scr_anim_del_ready_cb) referenced from gt_disp.o(i.gt_disp_load_scr_anim)
 <LI><a href="#[8d]">_scr_anim_exec_x_cb</a> from gt_disp.o(i._scr_anim_exec_x_cb) referenced from gt_disp.o(i.gt_disp_load_scr_anim)
 <LI><a href="#[8e]">_scr_anim_exec_y_cb</a> from gt_disp.o(i._scr_anim_exec_y_cb) referenced from gt_disp.o(i.gt_disp_load_scr_anim)
 <LI><a href="#[8c]">_scr_anim_ready_cb</a> from gt_disp.o(i._scr_anim_ready_cb) referenced from gt_disp.o(i.gt_disp_load_scr_anim)
 <LI><a href="#[8b]">_scr_anim_start_cb</a> from gt_disp.o(i._scr_anim_start_cb) referenced from gt_disp.o(i.gt_disp_load_scr_anim)
 <LI><a href="#[b2]">_screen_event_cb</a> from gt_obj.o(i._screen_event_cb) referenced from gt_obj.o(.constdata)
 <LI><a href="#[91]">_scroll_by_x</a> from gt_obj_scroll.o(i._scroll_by_x) referenced from gt_obj_scroll.o(i.gt_obj_scroll_to)
 <LI><a href="#[92]">_scroll_by_y</a> from gt_obj_scroll.o(i._scroll_by_y) referenced from gt_obj_scroll.o(i.gt_obj_scroll_to)
 <LI><a href="#[93]">_scroll_ready_cb</a> from gt_obj_scroll.o(i._scroll_ready_cb) referenced from gt_obj_scroll.o(i.gt_obj_scroll_to)
 <LI><a href="#[a5]">_seek_cb</a> from gt_hal_src.o(i._seek_cb) referenced from gt_hal_src.o(i.gt_src_init)
 <LI><a href="#[ab]">_seek_cb</a> from gt_hal_vf.o(i._seek_cb) referenced from gt_hal_vf.o(i.gt_vf_init)
 <LI><a href="#[a6]">_tell_cb</a> from gt_hal_src.o(i._tell_cb) referenced from gt_hal_src.o(i.gt_src_init)
 <LI><a href="#[ac]">_tell_cb</a> from gt_hal_vf.o(i._tell_cb) referenced from gt_hal_vf.o(i.gt_vf_init)
 <LI><a href="#[aa]">_write_cb</a> from gt_hal_vf.o(i._write_cb) referenced from gt_hal_vf.o(i.gt_vf_init)
 <LI><a href="#[77]">fputc</a> from bsp_uart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[8f]">gt_indev_handler</a> from gt_indev.o(i.gt_indev_handler) referenced from gt_hal_indev.o(i.gt_indev_drv_register)
 <LI><a href="#[b6]">gt_init_screen_home</a> from gt_init_screen_home.o(i.gt_init_screen_home) referenced from gt_ui.o(.constdata)
 <LI><a href="#[78]">input_func</a> from gt_sjpg.o(i.input_func) referenced from gt_sjpg.o(i._common_sjpg_info)
 <LI><a href="#[78]">input_func</a> from gt_sjpg.o(i.input_func) referenced from gt_sjpg.o(i._common_sjpg_open)
 <LI><a href="#[78]">input_func</a> from gt_sjpg.o(i.input_func) referenced from gt_sjpg.o(i._gt_sjpg_read_line)
 <LI><a href="#[6c]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[7e]">output_func</a> from gt_sjpg.o(i.output_func) referenced from gt_sjpg.o(i._gt_sjpg_read_line)
 <LI><a href="#[99]">read_cb</a> from main.o(i.read_cb) referenced from gt_port_indev.o(i.gt_port_indev_init)
 <LI><a href="#[9a]">read_cb_btn</a> from main.o(i.read_cb_btn) referenced from gt_port_indev.o(i.gt_port_indev_init)
 <LI><a href="#[9b]">spi_wr</a> from main.o(i.spi_wr) referenced from gt_port_vf.o(i.gt_port_vf_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(.text)
</UL>
<P><STRONG><a name="[3ba]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[b8]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[f5]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3bb]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[3bc]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[3bd]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[3be]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[3bf]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[3c0]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>ACC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ADC1_2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_SE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>CAN2_SE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>CRM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMAMUX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DVP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EDMA_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EDMA_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EDMA_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EDMA_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EDMA_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EDMA_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EDMA_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>EDMA_Stream8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>EMAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>EMAC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>ERTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>ERTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXINT15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXINT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXINT9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_EVT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_EVT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I2C3_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_EVT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>OTGFS1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>OTGFS1_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTGFS2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTGFS2_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>QSPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>QSPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI2_I2S2EXT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI3_I2S3EXT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TMR1_BRK_TMR9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TMR1_CH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TMR1_OVF_TMR10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TMR1_TRG_HALL_TMR11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>TMR20_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>TMR20_CH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>TMR20_OVF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>TMR20_TRG_HALL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TMR2_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TMR3_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TMR4_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TMR5_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TMR6_DAC_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TMR7_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TMR8_BRK_TMR12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TMR8_CH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TMR8_OVF_TMR13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TMR8_TRG_HALL_TMR14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>XMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f435_437.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>GT_Font_Init</STRONG> (Thumb, 376 bytes, Stack size 184 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = GT_Font_Init &rArr; MD5Final &rArr; MD5Update &rArr; MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_read_data
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c9]"></a>GT_Set_Chinese_Charset_Type</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gt_gui_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_one_char_code_len_get
</UL>

<P><STRONG><a name="[d2]"></a>GT_Get_Chinese_Charset_Type</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gt_gui_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unicode_to_xxxx_vec
</UL>

<P><STRONG><a name="[b7]"></a>GT_GetVec</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1212<LI>Call Chain = GT_GetVec &rArr; get_font &rArr; Draw_hz &rArr; getBhDetailData &rArr; bending &rArr; BSpline
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_font
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gray_Process
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unicode_to_xxxx_vec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_gui_driver.o(.rodata.gt_get_font_func)
</UL>
<P><STRONG><a name="[c7]"></a>get_font_st</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, gt_gui_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectAddr
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeToNo
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFontAddr
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_hz
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_fh
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[c5]"></a>get_font</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1172<LI>Call Chain = get_font &rArr; Draw_hz &rArr; getBhDetailData &rArr; bending &rArr; BSpline
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectAddr
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeToNo
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFontAddr
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_hz
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_fh
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Font_Gray
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_GetVec
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vec_font_width
</UL>

<P><STRONG><a name="[c6]"></a>Gray_Process</STRONG> (Thumb, 1324 bytes, Stack size 72 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Gray_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Font_Gray
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_GetVec
</UL>

<P><STRONG><a name="[d1]"></a>get_Font_Gray</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, gt_gui_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_font
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gray_Process
</UL>

<P><STRONG><a name="[d7]"></a>get_width_func_vec</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_width_func_vec
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vec_font_width
</UL>

<P><STRONG><a name="[d3]"></a>UnicodeToGBK</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UnicodeToGBK &rArr; r_dat_bat &rArr; spiflash_read &rArr; spi_bytes_read
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dat_bat
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unicode_to_xxxx_vec
</UL>

<P><STRONG><a name="[d4]"></a>GBKToUnicode</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, gt_gui_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dat_bat
</UL>

<P><STRONG><a name="[d5]"></a>GT_Get_Font_Width</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1212<LI>Call Chain = GT_Get_Font_Width &rArr; get_vec_font_width &rArr; get_font &rArr; Draw_hz &rArr; getBhDetailData &rArr; bending &rArr; BSpline
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vec_font_width
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_get_one_word_width
</UL>

<P><STRONG><a name="[3c1]"></a>GT_Get_Font_Height</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gt_gui_driver.o(.text), UNUSED)

<P><STRONG><a name="[2c6]"></a>GT_Check_Is_Vec</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gt_gui_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_get_one_word_width
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_get_dot
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_code_transform
</UL>

<P><STRONG><a name="[d9]"></a>GT_Get_Font_Func_S</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gt_gui_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_get_dot
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_code_transform
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_Get_Font_Type
</UL>

<P><STRONG><a name="[d8]"></a>GT_Get_Font_Type</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GT_Get_Font_Type
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_Get_Font_Func_S
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_type_get
</UL>

<P><STRONG><a name="[2c7]"></a>GT_Font_Code_Transform</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gt_gui_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_code_transform
</UL>

<P><STRONG><a name="[2c8]"></a>GT_Get_Font_Convertor_Data</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gt_gui_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_convertor_data_get
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e9]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[2cc]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_get_src_type
</UL>

<P><STRONG><a name="[3c2]"></a>____aeabi_memcpy8$ret$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[3c3]"></a>___aeabi_memmove$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[3c4]"></a>___aeabi_memmove4$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[3c5]"></a>___aeabi_memmove8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>__aeabi_memcpy</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_split
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_single_line
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_multiple_line
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_text_convertor_split
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_convertor_string_width
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_content_or_get_words
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_write_disk
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_read_disk
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[154]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_stack_push_scr_only_st
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_ref_area
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_single_line
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_multiple_line
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_text_convertor_split
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_path_bounce
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_convertor_string_width
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_zTXt
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iCCP
</UL>

<P><STRONG><a name="[2ea]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memcpy
</UL>

<P><STRONG><a name="[2eb]"></a>memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memmove
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[3c6]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3c7]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_Font_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_font_st
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_font
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gray_Process
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
</UL>

<P><STRONG><a name="[e4]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_data_test
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_draw_blend
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_single_line
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_multiple_line
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_text_convertor_split
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_common_sjpg_open
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_common_sjpg_info
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_convertor_string_width
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_cb
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_content_or_get_words
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScanData
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[3c8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset_0
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset
</UL>

<P><STRONG><a name="[251]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[1a3]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_get_ext
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_png_file_ext
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gb_font_one_char_code_len_get
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_set_src
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_textarea_add_str
</UL>

<P><STRONG><a name="[1eb]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_png_file_ext
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_open_cb
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_open_cb
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_set_src
</UL>

<P><STRONG><a name="[c0]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_Font_Init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_data_test
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memcmp
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[2d0]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_set_src
</UL>

<P><STRONG><a name="[ec]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[f1]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[f2]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f3]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[16d]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3c9]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[1f4]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[3ca]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[3cb]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3cc]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[3cd]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[ee]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[f4]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b9]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[3ce]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[3cf]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[3d0]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f435_437_int.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f435_437_int.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f435_437_int.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f435_437_int.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f435_437_int.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f435_437_int.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SDIO1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_surf_f437_board_sd_card.o(i.SDIO1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDIO1_IRQHandler &rArr; sd_irq_service &rArr; command_rsp1_error
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_irq_service
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SDIO2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_surf_f437_board_sd_card.o(i.SDIO2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDIO2_IRQHandler &rArr; sd_irq_service &rArr; command_rsp1_error
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_irq_service
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f435_437_int.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f435_437_int.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tick_inc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>SystemInit</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, system_at32f435_437.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(.text)
</UL>
<P><STRONG><a name="[31]"></a>USART1_IRQHandler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, bsp_uart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; bsp_wdt_init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_clear
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_wdt_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f435_437_int.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f435_437.o(RESET)
</UL>
<P><STRONG><a name="[10c]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3d1]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[119]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_data_test
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_file_to_qspi_flash
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_bsp_init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_y
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_x
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_child
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_y
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_x
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_visible
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_reduce
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_start
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_reload_max_area
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_stack_push_scr_only_st
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_ref_area
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_area_max
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_area_act
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scr_anim_ready_cb
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_old_scr_anim_ready_cb
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_set_state
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_get_state
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flush_scr_by_direct
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flush_scr_by_anim
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_scr_by_id
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_set_depth
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_alive_scr_object_cb
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_close
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_bubble_notify
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_parent
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_event_calling_event_cb
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_right_to_left_handler
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_read_line
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_close
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_update_max_area
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_single_line
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_multiple_line
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_get_radius_mask
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_text_convertor_split
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_refr_timer
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_focus
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_virtual
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_touch_parent
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_scroll_to
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_hided_layer_top_widgets
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scroll_predict
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_pressed_handle
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_set_user_data
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_set_repeat_count
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_set_paused
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_get_user_data
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_create
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_remove_task
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_layout_row_grow
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_size_change
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_visible
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_virtual
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_untouchability
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_state
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_size
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_pos
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_overflow
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_opa
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_inside
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_focus_disabled
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_fixed
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_disabled
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_area
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_pos_change
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_w
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_trigger_mode
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_state
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_septal_line
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_mask_effect
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_h
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_child_set_prop
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_move_child_by
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_layer_top_widget_area
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_common_png_open
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_open_cb
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_open_cb
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_hal_fp_init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_create
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_max_area_recursive
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_convertor_string_width
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_create
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_add_pool
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deinit_cb
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_destroy_self
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_destroy_property
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_destroy_handler_cb
</UL>

<P><STRONG><a name="[3d2]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[3d3]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[3d4]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[3d5]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[3d6]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[98]"></a>_flush_cb</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(i._flush_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _flush_cb &rArr; lcd_color_fill &rArr; lcd_windows_set
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_color_fill
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_port_disp.o(i.gt_port_disp_init)
</UL>
<P><STRONG><a name="[17d]"></a>_gt_anim_core_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gt_anim.o(i._gt_anim_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _gt_anim_core_init &rArr; _gt_timer_create &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_create
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_change_list
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init
</UL>

<P><STRONG><a name="[18a]"></a>_gt_disp_hided_layer_top_widgets</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, gt_hal_disp.o(i._gt_disp_hided_layer_top_widgets))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _gt_disp_hided_layer_top_widgets &rArr; gt_event_send &rArr; _gt_event_send_kernel &rArr;  _gt_event_send_kernel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_visible
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_search_active_obj_from_all_layers
</UL>

<P><STRONG><a name="[18b]"></a>_gt_disp_refr_append_area</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, gt_hal_disp.o(i._gt_disp_refr_append_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _gt_disp_refr_append_area &rArr; gt_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_copy
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_join
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_is_on
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_disp
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_area_push
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_area_get_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_scroll_area_act
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_size_change
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_pos_change
</UL>

<P><STRONG><a name="[192]"></a>_gt_disp_refr_area_pop</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gt_hal_disp.o(i._gt_disp_refr_area_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gt_disp_refr_area_pop
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_area_get_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_get_area
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_refr_timer
</UL>

<P><STRONG><a name="[191]"></a>_gt_disp_refr_area_push</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gt_hal_disp.o(i._gt_disp_refr_area_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gt_disp_refr_area_push
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_area_get_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_append_area
</UL>

<P><STRONG><a name="[302]"></a>_gt_disp_refr_check</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gt_hal_disp.o(i._gt_disp_refr_check))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_refr_timer
</UL>

<P><STRONG><a name="[193]"></a>_gt_disp_refr_get_area</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, gt_hal_disp.o(i._gt_disp_refr_get_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _gt_disp_refr_get_area &rArr; _gt_disp_refr_area_pop
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_area_pop
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_area_get_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_refr_timer
</UL>

<P><STRONG><a name="[194]"></a>_gt_disp_refr_reset_areas</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gt_hal_disp.o(i._gt_disp_refr_reset_areas))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gt_disp_refr_reset_areas &rArr; gt_memset &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_disp
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_scroll_area_act
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_load_scr_anim
</UL>

<P><STRONG><a name="[195]"></a>_gt_disp_reload_max_area</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, gt_hal_disp.o(i._gt_disp_reload_max_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _gt_disp_reload_max_area &rArr; _calc_max_area_recursive &rArr;  _calc_max_area_recursive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_res_ver
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_res_hor
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_disp
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_max_area_recursive
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_load_scr_anim
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scr_anim_ready_cb
</UL>

<P><STRONG><a name="[11d]"></a>_gt_disp_update_max_area</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, gt_hal_disp.o(i._gt_disp_update_max_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _gt_disp_update_max_area &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_disp
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_size
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_area
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_layer_top_widget_area
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_max_area_recursive
</UL>

<P><STRONG><a name="[19c]"></a>_gt_extra_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gt_extra.o(i._gt_extra_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _gt_extra_init &rArr; gt_sjpg_init &rArr; gt_img_decoder_create &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_sjpg_init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_png_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init
</UL>

<P><STRONG><a name="[288]"></a>_gt_font_get_type_group_offset_y</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gt_font.o(i._gt_font_get_type_group_offset_y))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_single_line
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_multiple_line
</UL>

<P><STRONG><a name="[28c]"></a>_gt_font_is_convertor_language</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gt_font.o(i._gt_font_is_convertor_language))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_split
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_single_line
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_multiple_line
</UL>

<P><STRONG><a name="[1a2]"></a>_gt_gb_font_one_char_code_len_get</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, gt_font.o(i._gt_gb_font_one_char_code_len_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gt_gb_font_one_char_code_len_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_one_char_code_len_get
</UL>

<P><STRONG><a name="[18c]"></a>_gt_gc_get_disp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gt_gc.o(i._gt_gc_get_disp))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_res_ver
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_res_hor
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_default
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_reload_max_area
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_reset_areas
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_append_area
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_drv_register
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_update_max_area
</UL>

<P><STRONG><a name="[303]"></a>_gt_gc_get_scr_info</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gt_gc.o(i._gt_gc_get_scr_info))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_set_home_scr_id
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_set_home_scr
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_set_depth
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_register_id_list
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_push
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_pop
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_peek
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_is_home_scr_alive
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_is_empty
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_has_before
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_get_init_func
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_get_home_scr_id
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_clear
</UL>

<P><STRONG><a name="[185]"></a>_gt_gc_set_disp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gt_gc.o(i._gt_gc_set_disp))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_create
</UL>

<P><STRONG><a name="[1a7]"></a>_gt_hal_fp_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gt_hal_fs.o(i._gt_hal_fp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _gt_hal_fp_init &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset_0
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_open_cb
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_open_cb
</UL>

<P><STRONG><a name="[1a9]"></a>_gt_img_decoder_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gt_img_decoder.o(i._gt_img_decoder_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _gt_img_decoder_init &rArr; gt_img_decoder_create &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_register
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init
</UL>

<P><STRONG><a name="[1b6]"></a>_gt_indev_remove_want_delate_target</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, gt_indev.o(i._gt_indev_remove_want_delate_target))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gt_indev_remove_want_delate_target
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_get_dev_count
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_get_dev_by_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_destroy_property
</UL>

<P><STRONG><a name="[175]"></a>_gt_is_style_cn_or_en</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, gt_font.o(i._gt_is_style_cn_or_en))
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_get_dot
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_single_line
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_multiple_line
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_font_language_split
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_font_lang_and_punctuation_split
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_font_style
</UL>

<P><STRONG><a name="[16e]"></a>_gt_obj_class_destroy</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gt_obj_class.o(i._gt_obj_class_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _gt_obj_class_destroy &rArr; _destroy_and_free_children &rArr;  _destroy_and_free_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_destroy_self
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_destroy_screen
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_destroy_from_parent
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_destroy_and_free_children
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_load_scr_anim
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_pop
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_alive_scr_object_cb
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_destroy_handler_cb
</UL>

<P><STRONG><a name="[1bc]"></a>_gt_obj_class_inherent_attr_from_parent</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gt_obj_class.o(i._gt_obj_class_inherent_attr_from_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _gt_obj_class_inherent_attr_from_parent &rArr; gt_obj_child_set_prop &rArr;  gt_obj_child_set_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_overflow
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_child_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_class_create
</UL>

<P><STRONG><a name="[90]"></a>_gt_obj_destroy_handler_cb</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, gt_obj.o(i._gt_obj_destroy_handler_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _gt_obj_destroy_handler_cb &rArr; _gt_obj_class_destroy &rArr; _destroy_and_free_children &rArr;  _destroy_and_free_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_destroy
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_set_user_data
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_set_repeat_count
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_get_user_data
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_obj.o(i.gt_obj_destroy)
</UL>
<P><STRONG><a name="[1c2]"></a>_gt_obj_focus_clicked</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, gt_obj_pos.o(i._gt_obj_focus_clicked))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + In Cycle
<LI>Call Chain = _gt_obj_focus_clicked &rArr;  _gt_obj_focus_clicked (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_focus_clicked
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_focus_clicked
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_find_clicked_obj_by_focus
</UL>

<P><STRONG><a name="[11c]"></a>_gt_obj_is_ignore_calc_max_area</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gt_style.o(i._gt_obj_is_ignore_calc_max_area))
<BR><BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_size
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_area
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_layer_top_widget_area
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_max_area_recursive
</UL>

<P><STRONG><a name="[1c5]"></a>_gt_obj_move_child_by</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, gt_style.o(i._gt_obj_move_child_by))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = _gt_obj_move_child_by &rArr;  _gt_obj_move_child_by (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_move_child_by
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_pos
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_move_child_by
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_layer_top_widget_area
</UL>

<P><STRONG><a name="[1d3]"></a>_gt_obj_set_process_point</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gt_obj_scroll.o(i._gt_obj_set_process_point))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_pressed_handle
</UL>

<P><STRONG><a name="[205]"></a>_gt_obj_set_process_scroll_xy</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gt_obj_scroll.o(i._gt_obj_set_process_scroll_xy))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scroll_by_y
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scroll_by_x
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_scroll_to
</UL>

<P><STRONG><a name="[2d6]"></a>_gt_timer_core_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gt_timer.o(i._gt_timer_core_init))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init
</UL>

<P><STRONG><a name="[17e]"></a>_gt_timer_create</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, gt_timer.o(i._gt_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _gt_timer_create &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tick_get
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_destroy
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_drv_register
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_drv_register
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_core_init
</UL>

<P><STRONG><a name="[1bf]"></a>_gt_timer_get_user_data</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gt_timer.o(i._gt_timer_get_user_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _gt_timer_get_user_data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_destroy_handler_cb
</UL>

<P><STRONG><a name="[1cf]"></a>_gt_timer_handler</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, gt_timer.o(i._gt_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _gt_timer_handler &rArr; _gt_timer_remove_task &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tick_get
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_remove_task
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_task_handler
</UL>

<P><STRONG><a name="[17c]"></a>_gt_timer_set_paused</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, gt_timer.o(i._gt_timer_set_paused))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _gt_timer_set_paused &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tick_get
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_change_list
</UL>

<P><STRONG><a name="[1c0]"></a>_gt_timer_set_repeat_count</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gt_timer.o(i._gt_timer_set_repeat_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _gt_timer_set_repeat_count &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_destroy
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_destroy_handler_cb
</UL>

<P><STRONG><a name="[1c1]"></a>_gt_timer_set_user_data</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gt_timer.o(i._gt_timer_set_user_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _gt_timer_set_user_data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_destroy_handler_cb
</UL>

<P><STRONG><a name="[2ca]"></a>_gt_utf8_to_unicode</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, gt_font.o(i._gt_utf8_to_unicode))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_one_char_code_len_get
</UL>

<P><STRONG><a name="[12a]"></a>_mem_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gt_mem.o(i._mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_destroy
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_create
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_right_to_left_handler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_single_line
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_multiple_line
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_radius_mask_deinit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_get_radius_mask
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_filling_by_sjpg_file
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_filling_by_default_line_mode
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_text_convertor_split
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sjpg_free
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_common_sjpg_open
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_common_sjpg_info
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_remove_task
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_png_open
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_png_close
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_common_png_open
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_free_task
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_close_cb
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_close_cb
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_class_create
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_convertor_string_width
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_set_src
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deinit_cb
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_destroy_self
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_destroy_property
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_destroy_and_free_children
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_contents
</UL>

<P><STRONG><a name="[111]"></a>_mem_malloc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gt_mem.o(i._mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_start
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_load_scr_anim
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_create
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_vf_init
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_src_init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_drv_register
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_right_to_left_handler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_single_line
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_multiple_line
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_get_radius_mask
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_filling_by_sjpg_file
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_filling_by_default_line_mode
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_text_convertor_split
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_create
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_sjpg_st
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_common_sjpg_open
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_common_sjpg_info
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_create
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_common_png_open
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_hal_fp_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_class_create
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_create
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_convertor_string_width
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_realloc
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_set_src
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_new_screen_obj
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_obj_to_parent
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_textarea_add_str
</UL>

<P><STRONG><a name="[10f]"></a>_mem_realloc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gt_mem.o(i._mem_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _mem_realloc &rArr; gt_tlsf_realloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_load_scr_anim
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_single_line
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_multiple_line
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_realloc
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_destroy_screen
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_destroy_from_parent
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_new_screen_obj
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_obj_to_parent
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_textarea_add_str
</UL>

<P><STRONG><a name="[93]"></a>_scroll_ready_cb</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gt_obj_scroll.o(i._scroll_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scroll_ready_cb &rArr; gt_event_send &rArr; _gt_event_send_kernel &rArr;  _gt_event_send_kernel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_obj_scroll.o(i.gt_obj_scroll_to)
</UL>
<P><STRONG><a name="[20c]"></a>all_bsp_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, app.o(i.all_bsp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8344<LI>Call Chain = all_bsp_init &rArr; spi_flash_data_test &rArr; spiflash_write &rArr; spiflash_write_nocheck &rArr; spiflash_page_write &rArr; spiflash_wait_busy &rArr; spiflash_read_sr1 &rArr; spi_byte_write
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print_init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_data_test
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd__init
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application
</UL>

<P><STRONG><a name="[217]"></a>application</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(i.application))
<BR><BR>[Stack]<UL><LI>Max Depth = 9400<LI>Call Chain = application &rArr; copy_file_to_qspi_flash &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_write_disk &rArr; sd_mult_blocks_write &rArr; sdio_command_data_send &rArr; sd_init &rArr; speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_file_to_qspi_flash
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_bsp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10b]"></a>bsp_wdt_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bsp_wdt.o(i.bsp_wdt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_wdt_init
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_reload_value_set
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_register_write_enable
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_enable
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_divider_set
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_counter_reload
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[22e]"></a>check_card_programming</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, at_surf_f437_board_sd_card.o(i.check_card_programming))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = check_card_programming
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_response_get
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_get
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_clear
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_state_machine_enable
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_response_get
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_config
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_mult_blocks_write
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
</UL>

<P><STRONG><a name="[23b]"></a>command_error</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, at_surf_f437_board_sd_card.o(i.command_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = command_error
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_get
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_power_on
</UL>

<P><STRONG><a name="[23c]"></a>command_rsp1_error</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, at_surf_f437_board_sd_card.o(i.command_rsp1_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = command_rsp1_error
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_response_get
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_get
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_clear
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_response_get
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_data_send
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_switch
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_status_send
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_power_on
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_irq_service
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_deselect_select
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_bus_wide_enable
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scr_find
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_switch
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_mult_blocks_write
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_mult_blocks_read
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_read
</UL>

<P><STRONG><a name="[23d]"></a>command_rsp2_error</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, at_surf_f437_board_sd_card.o(i.command_rsp2_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = command_rsp2_error
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_get
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
</UL>

<P><STRONG><a name="[23e]"></a>command_rsp3_error</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, at_surf_f437_board_sd_card.o(i.command_rsp3_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = command_rsp3_error
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_get
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_power_on
</UL>

<P><STRONG><a name="[23f]"></a>command_rsp6_error</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, at_surf_f437_board_sd_card.o(i.command_rsp6_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = command_rsp6_error
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_response_get
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_get
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_clear
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_response_get
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
</UL>

<P><STRONG><a name="[240]"></a>command_rsp7_error</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, at_surf_f437_board_sd_card.o(i.command_rsp7_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = command_rsp7_error
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_power_on
</UL>

<P><STRONG><a name="[373]"></a>convert_from_bytes_to_power_of_two</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at_surf_f437_board_sd_card.o(i.convert_from_bytes_to_power_of_two))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_switch
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_mult_blocks_write
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_mult_blocks_read
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_read
</UL>

<P><STRONG><a name="[218]"></a>copy_file_to_qspi_flash</STRONG> (Thumb, 292 bytes, Stack size 8808 bytes, app.o(i.copy_file_to_qspi_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 9392<LI>Call Chain = copy_file_to_qspi_flash &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_write_disk &rArr; sd_mult_blocks_write &rArr; sdio_command_data_send &rArr; sd_init &rArr; speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_write
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_sector_erase
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_erase
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_data_write
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_data_read
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application
</UL>

<P><STRONG><a name="[246]"></a>crc32</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, app.o(i.crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_file_to_qspi_flash
</UL>

<P><STRONG><a name="[3a9]"></a>crm_ahb_div_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32f435_437_crm.o(i.crm_ahb_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[3ab]"></a>crm_apb1_div_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32f435_437_crm.o(i.crm_apb1_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[3aa]"></a>crm_apb2_div_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32f435_437_crm.o(i.crm_apb2_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[3ac]"></a>crm_auto_step_mode_enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at32f435_437_crm.o(i.crm_auto_step_mode_enable))
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[3a7]"></a>crm_clock_source_enable</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, at32f435_437_crm.o(i.crm_clock_source_enable))
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[257]"></a>crm_clocks_freq_get</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, at32f435_437_crm.o(i.crm_clocks_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
</UL>

<P><STRONG><a name="[25a]"></a>crm_flag_get</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, at32f435_437_crm.o(i.crm_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_hext_stable_wait
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[259]"></a>crm_hext_stable_wait</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, at32f435_437_crm.o(i.crm_hext_stable_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crm_hext_stable_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[363]"></a>crm_periph_clock_enable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, at32f435_437_crm.o(i.crm_periph_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print_init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_init
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmc_init
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_dma_config
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_init
</UL>

<P><STRONG><a name="[3a8]"></a>crm_pll_config</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, at32f435_437_crm.o(i.crm_pll_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crm_pll_config
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[3a6]"></a>crm_reset</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, at32f435_437_crm.o(i.crm_reset))
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[3ad]"></a>crm_sysclk_switch</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32f435_437_crm.o(i.crm_sysclk_switch))
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[258]"></a>crm_sysclk_switch_status_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_crm.o(i.crm_sysclk_switch_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
</UL>

<P><STRONG><a name="[276]"></a>delay_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, at_surf_f437_board_delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_clock_source_config
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32e]"></a>delay_ms</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, at_surf_f437_board_delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_power_on
</UL>

<P><STRONG><a name="[27e]"></a>disk_initialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at_surf_f437_board_diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = disk_initialize &rArr; sd_init &rArr; speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_init
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[253]"></a>disk_ioctl</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, at_surf_f437_board_diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = disk_ioctl &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
</UL>

<P><STRONG><a name="[280]"></a>disk_read</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, at_surf_f437_board_diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = disk_read &rArr; sd_read_disk &rArr; sd_mult_blocks_read &rArr; sdio_command_data_send &rArr; sd_init &rArr; speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_read_disk
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[355]"></a>disk_status</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at_surf_f437_board_diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[256]"></a>disk_write</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, at_surf_f437_board_diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = disk_write &rArr; sd_write_disk &rArr; sd_mult_blocks_write &rArr; sdio_command_data_send &rArr; sd_init &rArr; speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_write_disk
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
</UL>

<P><STRONG><a name="[37d]"></a>dma_channel_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_dma.o(i.dma_channel_enable))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_dma_config
</UL>

<P><STRONG><a name="[37b]"></a>dma_default_para_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at32f435_437_dma.o(i.dma_default_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_dma_config
</UL>

<P><STRONG><a name="[37e]"></a>dma_init</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, at32f435_437_dma.o(i.dma_init))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_dma_config
</UL>

<P><STRONG><a name="[37c]"></a>dma_reset</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, at32f435_437_dma.o(i.dma_reset))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_dma_config
</UL>

<P><STRONG><a name="[380]"></a>dmamux_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f435_437_dma.o(i.dmamux_enable))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_dma_config
</UL>

<P><STRONG><a name="[37f]"></a>dmamux_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_dma.o(i.dmamux_init))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_dma_config
</UL>

<P><STRONG><a name="[1e7]"></a>draw_bg</STRONG> (Thumb, 1294 bytes, Stack size 168 bytes, gt_draw.o(i.draw_bg))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = draw_bg &rArr; gt_draw_blend &rArr; gt_draw_blend_with_rgb565_no_opacity &rArr; _blend_rgb565_with_no_opacity &rArr; gt_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_is_intersect_screen
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_copy
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_draw_blend
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_radius_mask_init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_radius_mask_deinit
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_get_radius_mask_buf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_focus
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_cb
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_cb
</UL>

<P><STRONG><a name="[1e2]"></a>draw_bg_img</STRONG> (Thumb, 186 bytes, Stack size 96 bytes, gt_draw.o(i.draw_bg_img))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = draw_bg_img &rArr; _filling_by_default_line_mode &rArr; gt_draw_blend &rArr; gt_draw_blend_with_rgb565_no_opacity &rArr; _blend_rgb565_with_no_opacity &rArr; gt_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_open
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_close
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_update_max_area
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_filling_by_sjpg_file
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_filling_by_ram_data
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_filling_by_default_line_mode
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_cb
</UL>

<P><STRONG><a name="[1e3]"></a>draw_focus</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, gt_draw.o(i.draw_focus))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = draw_focus &rArr; draw_bg &rArr; gt_draw_blend &rArr; gt_draw_blend_with_rgb565_no_opacity &rArr; _blend_rgb565_with_no_opacity &rArr; gt_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_graph_init_rect_attr
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_color_focus
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_cb
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_cb
</UL>

<P><STRONG><a name="[14a]"></a>draw_text</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gt_draw.o(i.draw_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1700<LI>Call Chain = draw_text &rArr; draw_text_single_line &rArr; _draw_text_convertor_split &rArr; gt_font_get_one_word_width &rArr; GT_Get_Font_Width &rArr; get_vec_font_width &rArr; get_font &rArr; Draw_hz &rArr; getBhDetailData &rArr; bending &rArr; BSpline
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_single_line
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_content_or_get_words
</UL>

<P><STRONG><a name="[24a]"></a>f_close</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; sd_write_disk &rArr; sd_mult_blocks_write &rArr; sdio_command_data_send &rArr; sd_init &rArr; speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_file_to_qspi_flash
</UL>

<P><STRONG><a name="[293]"></a>f_mkfs</STRONG> (Thumb, 1392 bytes, Stack size 104 bytes, ff.o(i.f_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = f_mkfs &rArr; create_partition &rArr; disk_write &rArr; sd_write_disk &rArr; sd_mult_blocks_write &rArr; sdio_command_data_send &rArr; sd_init &rArr; speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_init
</UL>

<P><STRONG><a name="[295]"></a>f_mount</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = f_mount &rArr; mount_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_write_disk &rArr; sd_mult_blocks_write &rArr; sdio_command_data_send &rArr; sd_init &rArr; speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_init
</UL>

<P><STRONG><a name="[241]"></a>f_open</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_write_disk &rArr; sd_mult_blocks_write &rArr; sdio_command_data_send &rArr; sd_init &rArr; speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_file_to_qspi_flash
</UL>

<P><STRONG><a name="[244]"></a>f_read</STRONG> (Thumb, 326 bytes, Stack size 48 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_write_disk &rArr; sd_mult_blocks_write &rArr; sdio_command_data_send &rArr; sd_init &rArr; speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_file_to_qspi_flash
</UL>

<P><STRONG><a name="[291]"></a>f_sync</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; sd_write_disk &rArr; sd_mult_blocks_write &rArr; sdio_command_data_send &rArr; sd_init &rArr; speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[20f]"></a>file_system_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, fatfs_test.o(i.file_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = file_system_init &rArr; f_mkfs &rArr; create_partition &rArr; disk_write &rArr; sd_write_disk &rArr; sd_mult_blocks_write &rArr; sdio_command_data_send &rArr; sd_init &rArr; speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_bsp_init
</UL>

<P><STRONG><a name="[77]"></a>fputc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bsp_uart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[2fe]"></a>gpio_bits_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f435_437_gpio.o(i.gpio_bits_reset))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_sector_erase
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_write_enable
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read_sr1
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_page_write
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_read_data
</UL>

<P><STRONG><a name="[301]"></a>gpio_bits_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f435_437_gpio.o(i.gpio_bits_set))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_sector_erase
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_write_enable
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read_sr1
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_page_write
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_read_data
</UL>

<P><STRONG><a name="[364]"></a>gpio_default_para_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at32f435_437_gpio.o(i.gpio_default_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print_init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_init
</UL>

<P><STRONG><a name="[365]"></a>gpio_init</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, at32f435_437_gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print_init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_init
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmc_init
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_init
</UL>

<P><STRONG><a name="[366]"></a>gpio_pin_mux_config</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, at32f435_437_gpio.o(i.gpio_pin_mux_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_pin_mux_config
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print_init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_init
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmc_init
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_init
</UL>

<P><STRONG><a name="[15c]"></a>gt_abs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gt_math.o(i.gt_abs))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flush_scr_by_anim
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fill_color_hor
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_speed_to_time
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_scroll_dir
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_cb
</UL>

<P><STRONG><a name="[2a9]"></a>gt_anim_del</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, gt_anim.o(i.gt_anim_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gt_anim_del &rArr; _gt_anim_free_task &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_is_ll_empty
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_free_task
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_scroll_to
</UL>

<P><STRONG><a name="[1e0]"></a>gt_anim_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gt_anim.o(i.gt_anim_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gt_anim_init &rArr; gt_memset_0 &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset_0
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_load_scr_anim
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_scroll_to
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_scroll_throw_handler_anim_start
</UL>

<P><STRONG><a name="[2b6]"></a>gt_anim_set_path_type</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gt_anim.o(i.gt_anim_set_path_type))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_load_scr_anim
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_scroll_to
</UL>

<P><STRONG><a name="[2aa]"></a>gt_anim_speed_to_time</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gt_anim.o(i.gt_anim_speed_to_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_anim_speed_to_time
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_scroll_to
</UL>

<P><STRONG><a name="[1e1]"></a>gt_anim_start</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, gt_anim.o(i.gt_anim_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gt_anim_start &rArr; _gt_anim_free_task &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memcpy
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tick_get
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_is_ll_empty
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_free_task
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_change_list
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_load_scr_anim
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_scroll_to
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_scroll_throw_handler_anim_start
</UL>

<P><STRONG><a name="[18f]"></a>gt_area_copy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gt_obj_pos.o(i.gt_area_copy))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_append_area
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_old_scr_anim_ready_cb
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_radius_mask_init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_click_point_by_phy_point
</UL>

<P><STRONG><a name="[124]"></a>gt_area_cover_screen</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, gt_area.o(i.gt_area_cover_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = gt_area_cover_screen &rArr; _gt_area_is_outside_area
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_area_is_outside_area
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flush_scr_by_anim
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_and_copy_foreach
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_draw_blend_text
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_draw_blend
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_cover_dst_area_and_offset_by
</UL>

<P><STRONG><a name="[2ac]"></a>gt_area_intersect_screen</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, gt_area.o(i.gt_area_intersect_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = gt_area_intersect_screen &rArr; _gt_area_is_outside_area
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_area_is_outside_area
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_draw_blend_text
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_draw_blend
</UL>

<P><STRONG><a name="[160]"></a>gt_area_is_intersect_screen</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, gt_area.o(i.gt_area_is_intersect_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = gt_area_is_intersect_screen &rArr; _gt_area_is_outside_area
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_area_is_outside_area
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_check_obj_visible_and_copy
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flush_scr_by_direct
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_filling_by_sjpg_file
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_filling_by_default_line_mode
</UL>

<P><STRONG><a name="[18d]"></a>gt_area_is_on</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, gt_area.o(i.gt_area_is_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gt_area_is_on
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_append_area
</UL>

<P><STRONG><a name="[18e]"></a>gt_area_join</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, gt_area.o(i.gt_area_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gt_area_join
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_append_area
</UL>

<P><STRONG><a name="[179]"></a>gt_bezier3</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gt_math.o(i.gt_bezier3))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gt_bezier3
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_path_bounce
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_calc_path_by_bezier
</UL>

<P><STRONG><a name="[15d]"></a>gt_color_fill</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, gt_color.o(i.gt_color_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gt_color_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flush_scr_by_direct
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fill_color_ver
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fill_color_hor
</UL>

<P><STRONG><a name="[285]"></a>gt_color_focus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gt_color.o(i.gt_color_focus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_color_focus
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_focus
</UL>

<P><STRONG><a name="[208]"></a>gt_dialog_has_showing</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gt_dialog.o(i.gt_dialog_has_showing))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gt_dialog_has_showing &rArr; _find_showing_recursive_by_type &rArr;  _find_showing_recursive_by_type (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_default
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_find_showing_recursive_by_type
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_search_active_obj_from_all_layers
</UL>

<P><STRONG><a name="[2f9]"></a>gt_disp_drv_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gt_hal_disp.o(i.gt_disp_drv_init))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_port_disp_init
</UL>

<P><STRONG><a name="[2b0]"></a>gt_disp_drv_register</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gt_hal_disp.o(i.gt_disp_drv_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = gt_disp_drv_register &rArr; _gt_disp_create &rArr; gt_obj_class_create &rArr; gt_layout_row_grow &rArr; _row_grow_inside_invert &rArr;  _row_grow_inside_invert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_create
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_disp
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_port_disp_init
</UL>

<P><STRONG><a name="[203]"></a>gt_disp_get_area_act</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gt_disp.o(i.gt_disp_get_area_act))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_disp_get_area_act &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_default
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_scroll_area_act
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_click_point_by_phy_point
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_screen_scroll
</UL>

<P><STRONG><a name="[202]"></a>gt_disp_get_area_max</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gt_disp.o(i.gt_disp_get_area_max))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_disp_get_area_max &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_default
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_scroll_area_act
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_screen_scroll
</UL>

<P><STRONG><a name="[13d]"></a>gt_disp_get_default</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gt_hal_disp.o(i.gt_disp_get_default))
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_disp
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_set_scr
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_ref_area
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_load_scr_anim
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_scr
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_layer_top
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_area_max
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_area_act
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scr_anim_start_cb
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scr_anim_ready_cb
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_refr_timer
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_dialog_has_showing
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_layer_top_widget_area
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_destroy_screen
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_new_screen_obj
</UL>

<P><STRONG><a name="[206]"></a>gt_disp_get_layer_top</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gt_disp.o(i.gt_disp_get_layer_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_disp_get_layer_top
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_search_active_obj_from_all_layers
</UL>

<P><STRONG><a name="[13e]"></a>gt_disp_get_res_hor</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gt_hal_disp.o(i.gt_disp_get_res_hor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_disp_get_res_hor
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_disp
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_reload_max_area
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_ref_area
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_area_flush_by_calc_partly_redraw_area
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scr_anim_ready_cb
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flush_scr_by_anim
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_scroll_to
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_new_screen_obj
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_screen_scroll
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_screen_event_cb
</UL>

<P><STRONG><a name="[13f]"></a>gt_disp_get_res_ver</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gt_hal_disp.o(i.gt_disp_get_res_ver))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_disp_get_res_ver
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_disp
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_reload_max_area
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_ref_area
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_area_flush_by_calc_partly_redraw_area
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scr_anim_ready_cb
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flush_scr_by_anim
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_scroll_to
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_new_screen_obj
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_screen_scroll
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_screen_event_cb
</UL>

<P><STRONG><a name="[1ae]"></a>gt_disp_get_scr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gt_disp.o(i.gt_disp_get_scr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_disp_get_scr
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_check_scr
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_stack_push_scr_only_st
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_load_scr_anim
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_prev_focus_change
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_next_focus_change
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_search_active_obj_from_all_layers
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_scroll_throw_handler_anim_start
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_indev_handler_keypad
</UL>

<P><STRONG><a name="[2fa]"></a>gt_disp_graph_buf_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gt_hal_disp.o(i.gt_disp_graph_buf_init))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_port_disp_init
</UL>

<P><STRONG><a name="[158]"></a>gt_disp_invalid_area</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, gt_disp.o(i.gt_disp_invalid_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = gt_disp_invalid_area &rArr; _gt_disp_refr_append_area &rArr; gt_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_child
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_y
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_x
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_check_scr
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_res_ver
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_res_hor
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_append_area
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_scr
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_layer_top
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_stack_load_scr_anim_st
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scr_anim_ready_cb
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_focus
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_visible
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_focus_disabled
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_disabled
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_cb
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unmasked_effect_handler
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_event_cb
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_cb
</UL>

<P><STRONG><a name="[2b3]"></a>gt_disp_load_scr_anim</STRONG> (Thumb, 524 bytes, Stack size 208 bytes, gt_disp.o(i.gt_disp_load_scr_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = gt_disp_load_scr_anim &rArr; gt_disp_ref_area &rArr; _flush_scr_by_anim &rArr; _gt_disp_check_and_copy_foreach &rArr; _check_and_copy_foreach &rArr;  _check_and_copy_foreach (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_y
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_x
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memcpy
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_default
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_start
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_set_path_type
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_realloc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_reload_max_area
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_reset_areas
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_set_scr
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_ref_area
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_scr
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_stack_load_scr_anim_st
</UL>

<P><STRONG><a name="[2b5]"></a>gt_disp_ref_area</STRONG> (Thumb, 172 bytes, Stack size 64 bytes, gt_disp.o(i.gt_disp_ref_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = gt_disp_ref_area &rArr; _flush_scr_by_anim &rArr; _gt_disp_check_and_copy_foreach &rArr; _check_and_copy_foreach &rArr;  _check_and_copy_foreach (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_res_ver
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_res_hor
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_default
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_set_state
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_get_state
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flush_scr_by_direct
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flush_scr_by_anim
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_load_scr_anim
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_refr_timer
</UL>

<P><STRONG><a name="[204]"></a>gt_disp_scroll_area_act</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, gt_disp.o(i.gt_disp_scroll_area_act))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = gt_disp_scroll_area_act &rArr; _gt_disp_refr_append_area &rArr; gt_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_reset_areas
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_append_area
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_area_max
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_area_act
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_screen_scroll
</UL>

<P><STRONG><a name="[2b4]"></a>gt_disp_set_scr</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gt_disp.o(i.gt_disp_set_scr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_disp_set_scr
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_load_scr_anim
</UL>

<P><STRONG><a name="[2b7]"></a>gt_disp_stack_load_scr</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, gt_disp.o(i.gt_disp_stack_load_scr))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = gt_disp_stack_load_scr &rArr; gt_disp_stack_load_scr_anim_st &rArr; gt_disp_load_scr_anim &rArr; gt_disp_ref_area &rArr; _flush_scr_by_anim &rArr; _gt_disp_check_and_copy_foreach &rArr; _check_and_copy_foreach &rArr;  _check_and_copy_foreach (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_stack_load_scr_anim_st
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_ui_init
</UL>

<P><STRONG><a name="[2b8]"></a>gt_disp_stack_load_scr_anim_st</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, gt_disp.o(i.gt_disp_stack_load_scr_anim_st))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = gt_disp_stack_load_scr_anim_st &rArr; gt_disp_load_scr_anim &rArr; gt_disp_ref_area &rArr; _flush_scr_by_anim &rArr; _gt_disp_check_and_copy_foreach &rArr; _check_and_copy_foreach &rArr;  _check_and_copy_foreach (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_stack_push_scr_only_st
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_load_scr_anim
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_stack_load_scr
</UL>

<P><STRONG><a name="[2b9]"></a>gt_disp_stack_push_scr_only_st</STRONG> (Thumb, 338 bytes, Stack size 72 bytes, gt_disp.o(i.gt_disp_stack_push_scr_only_st))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = gt_disp_stack_push_scr_only_st &rArr; gt_scr_stack_pop &rArr; _gt_obj_class_destroy &rArr; _destroy_and_free_children &rArr;  _destroy_and_free_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_scr
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_scr_by_id
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_set_home_scr
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_push
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_pop
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_peek
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_is_home_scr_alive
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_is_empty
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_has_before
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_get_home_scr_id
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_clear
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_stack_load_scr_anim_st
</UL>

<P><STRONG><a name="[146]"></a>gt_draw_blend</STRONG> (Thumb, 336 bytes, Stack size 72 bytes, gt_draw_blend.o(i.gt_draw_blend))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = gt_draw_blend &rArr; gt_draw_blend_with_rgb565_no_opacity &rArr; _blend_rgb565_with_no_opacity &rArr; gt_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_cover_screen
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_cover_dst_area_and_offset_by
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_draw_blend_with_rgb565_opacity
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_draw_blend_with_rgb565_no_opacity
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_intersect_screen
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_single_line
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_multiple_line
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_filling_by_sjpg_file
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_filling_by_ram_data
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_filling_by_default_line_mode
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_blend_underline
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_blend_strikethrough
</UL>

<P><STRONG><a name="[156]"></a>gt_draw_blend_text</STRONG> (Thumb, 886 bytes, Stack size 88 bytes, gt_draw_blend.o(i.gt_draw_blend_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = gt_draw_blend_text &rArr; _get_cover_dst_area_and_offset_by &rArr; gt_area_cover_screen &rArr; _gt_area_is_outside_area
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_cover_screen
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_color_mix
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_cover_dst_area_and_offset_by
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_per_255
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_intersect_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_single_line
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_multiple_line
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_text_convertor_split
</UL>

<P><STRONG><a name="[2c4]"></a>gt_draw_blend_with_rgb565_no_opacity</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gt_draw_blend_with_rgb565.o(i.gt_draw_blend_with_rgb565_no_opacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = gt_draw_blend_with_rgb565_no_opacity &rArr; _blend_rgb565_with_no_opacity &rArr; gt_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_blend_rgb565_with_no_opacity
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_draw_blend
</UL>

<P><STRONG><a name="[2c3]"></a>gt_draw_blend_with_rgb565_opacity</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gt_draw_blend_with_rgb565.o(i.gt_draw_blend_with_rgb565_opacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = gt_draw_blend_with_rgb565_opacity &rArr; _blend_rgb565_with_opacity &rArr; gt_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_blend_rgb565_with_opacity
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_draw_blend
</UL>

<P><STRONG><a name="[157]"></a>gt_event_get_code</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gt_event.o(i.gt_event_get_code))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_cb
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_screen_event_cb
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_event_cb
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_cb
</UL>

<P><STRONG><a name="[110]"></a>gt_event_send</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, gt_event.o(i.gt_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gt_event_send &rArr; _gt_event_send_kernel &rArr;  _gt_event_send_kernel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_event_send_kernel
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scroll_ready_cb
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scroll_by_y
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scroll_by_x
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_focus
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_scroll_to
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_hided_layer_top_widgets
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_scroll_throw_handler_anim_start
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_released_handle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_pressed_handle
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_indev_handler_keypad
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_visible
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_size
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_opa
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_focus_disabled
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_disabled
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_area
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_layer_top_widget_area
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_set_src
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_cb
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_destroy_property
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_destroy_and_free_children
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_obj_to_parent
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_screen_event_cb
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_event_cb
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_textarea_set_font_size
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_textarea_set_font_color
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_textarea_set_bg_color
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_cb
</UL>

<P><STRONG><a name="[1af]"></a>gt_find_clicked_obj_by_focus</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gt_obj_pos.o(i.gt_find_clicked_obj_by_focus))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gt_find_clicked_obj_by_focus &rArr; _gt_obj_focus_clicked &rArr;  _gt_obj_focus_clicked (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_focus_clicked
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_indev_handler_keypad
</UL>

<P><STRONG><a name="[207]"></a>gt_find_clicked_obj_by_point</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, gt_obj_pos.o(i.gt_find_clicked_obj_by_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gt_find_clicked_obj_by_point &rArr; _gt_obj_foreach_clicked &rArr;  _gt_obj_foreach_clicked (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_foreach_clicked
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_search_active_obj_from_all_layers
</UL>

<P><STRONG><a name="[150]"></a>gt_font_code_transform</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gt_font.o(i.gt_font_code_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gt_font_code_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_Get_Font_Func_S
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_Font_Code_Transform
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_Check_Is_Vec
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_text_convertor_split
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_convertor_string_width
</UL>

<P><STRONG><a name="[151]"></a>gt_font_convertor_data_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gt_font.o(i.gt_font_convertor_data_get))
<BR><BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_Get_Font_Convertor_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_text_convertor_split
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_convertor_string_width
</UL>

<P><STRONG><a name="[290]"></a>gt_font_get_dot</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, gt_font.o(i.gt_font_get_dot))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = gt_font_get_dot &rArr; _get_font_style
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memcpy
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_is_style_cn_or_en
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_Get_Font_Func_S
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_Check_Is_Vec
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_font_style
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_single_line
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_multiple_line
</UL>

<P><STRONG><a name="[153]"></a>gt_font_get_one_word_width</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, gt_font.o(i.gt_font_get_one_word_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 1236<LI>Call Chain = gt_font_get_one_word_width &rArr; GT_Get_Font_Width &rArr; get_vec_font_width &rArr; get_font &rArr; Draw_hz &rArr; getBhDetailData &rArr; bending &rArr; BSpline
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_symbol_is_valid_range
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_Get_Font_Width
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_Check_Is_Vec
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_font_style
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_split
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_single_line
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_multiple_line
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_omit_get_font_width
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_text_convertor_split
</UL>

<P><STRONG><a name="[14e]"></a>gt_font_get_size_length_by_style</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, gt_font.o(i.gt_font_get_size_length_by_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gt_font_get_size_length_by_style &rArr; gt_font_type_get &rArr; GT_Get_Font_Type
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_type_get
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_single_line
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_multiple_line
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_text_convertor_split
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_convertor_string_width
</UL>

<P><STRONG><a name="[152]"></a>gt_font_get_word_width_figure_up</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, gt_font.o(i.gt_font_get_word_width_figure_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gt_font_get_word_width_figure_up
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_text_convertor_split
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_convertor_string_width
</UL>

<P><STRONG><a name="[316]"></a>gt_font_info_init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, gt_font.o(i.gt_font_info_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_font_info_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_textarea_create
</UL>

<P><STRONG><a name="[318]"></a>gt_font_info_update_font_thick</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gt_font.o(i.gt_font_info_update_font_thick))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_textarea_set_font_thick_en
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_textarea_set_font_thick_cn
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_textarea_set_font_size
</UL>

<P><STRONG><a name="[14c]"></a>gt_font_one_char_code_len_get</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gt_font.o(i.gt_font_one_char_code_len_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gt_font_one_char_code_len_get &rArr; _gt_gb_font_one_char_code_len_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_Set_Chinese_Charset_Type
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_utf8_to_unicode
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gb_font_one_char_code_len_get
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_right_to_left_handler
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_split
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_single_line
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_multiple_line
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_omit_get_font_width
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_text_convertor_split
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_font_language_split
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_font_lang_and_punctuation_split
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_convertor_string_width
</UL>

<P><STRONG><a name="[170]"></a>gt_font_split</STRONG> (Thumb, 496 bytes, Stack size 128 bytes, gt_font.o(i.gt_font_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 1364<LI>Call Chain = gt_font_split &rArr; gt_font_get_one_word_width &rArr; GT_Get_Font_Width &rArr; get_vec_font_width &rArr; get_font &rArr; Draw_hz &rArr; getBhDetailData &rArr; bending &rArr; BSpline
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_one_char_code_len_get
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_get_one_word_width
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_font_is_convertor_language
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_punctuation
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_font_language_split
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_convertor_string_width
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_single_line
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_multiple_line
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_align_start_y
</UL>

<P><STRONG><a name="[14d]"></a>gt_font_type_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gt_font.o(i.gt_font_type_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_font_type_get &rArr; GT_Get_Font_Type
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_Get_Font_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_get_size_length_by_style
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_text_convertor_split
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_convertor_string_width
</UL>

<P><STRONG><a name="[131]"></a>gt_fs_close</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gt_fs.o(i.gt_fs_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_fs_close &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_img_decoder_built_in_info
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_img_decoder_built_in_close
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_read_img_wh
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_info
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_close
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_common_sjpg_open
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_load_file
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_png_open
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_png_close
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_common_png_info
</UL>

<P><STRONG><a name="[1cd]"></a>gt_fs_get_ext</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gt_fs.o(i.gt_fs_get_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_fs_get_ext
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_info
</UL>

<P><STRONG><a name="[2cb]"></a>gt_fs_get_src_type</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, gt_fs.o(i.gt_fs_get_src_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_fs_get_src_type
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_open
</UL>

<P><STRONG><a name="[1a8]"></a>gt_fs_open</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gt_fs.o(i.gt_fs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gt_fs_open &rArr; gt_fs_get_src_type
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_vf_get_drv
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_src_get_drv
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_get_src_type
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_img_decoder_built_in_open
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_img_decoder_built_in_info
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_read_img_wh
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_open
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_info
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_load_file
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_png_open
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_png_info
</UL>

<P><STRONG><a name="[12e]"></a>gt_fs_read</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gt_fs.o(i.gt_fs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gt_fs_read
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_img_decoder_built_in_read_line
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_func
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_common_sjpg_open
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_common_sjpg_info
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_load_file
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_png_file_type
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_common_png_info
</UL>

<P><STRONG><a name="[161]"></a>gt_fs_read_img_offset</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, gt_fs.o(i.gt_fs_read_img_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gt_fs_read_img_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_filling_by_default_line_mode
</UL>

<P><STRONG><a name="[15a]"></a>gt_fs_read_img_wh</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gt_fs.o(i.gt_fs_read_img_wh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gt_fs_read_img_wh &rArr; gt_fs_close &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_open
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_close
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_cb
</UL>

<P><STRONG><a name="[12d]"></a>gt_fs_seek</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gt_fs.o(i.gt_fs_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_fs_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_img_decoder_built_in_read_line
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_func
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_read_line
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_common_sjpg_open
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_common_sjpg_info
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_load_file
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_png_file_type
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_common_png_info
</UL>

<P><STRONG><a name="[34b]"></a>gt_fs_tell</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gt_fs.o(i.gt_fs_tell))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_fs_tell
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_load_file
</UL>

<P><STRONG><a name="[1e5]"></a>gt_graph_init_rect_attr</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gt_graph_base.o(i.gt_graph_init_rect_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gt_graph_init_rect_attr &rArr; gt_color_black &rArr; gt_color_make
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_color_black
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_focus
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_cb
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_cb
</UL>

<P><STRONG><a name="[2ce]"></a>gt_img_create</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gt_img.o(i.gt_img_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = gt_img_create &rArr; gt_obj_class_create &rArr; gt_layout_row_grow &rArr; _row_grow_inside_invert &rArr;  _row_grow_inside_invert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_class_create
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init_screen_home
</UL>

<P><STRONG><a name="[284]"></a>gt_img_decoder_close</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gt_img_decoder.o(i.gt_img_decoder_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_img_decoder_close &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
</UL>

<P><STRONG><a name="[1aa]"></a>gt_img_decoder_create</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gt_img_decoder.o(i.gt_img_decoder_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gt_img_decoder_create &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_img_decoder_init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_sjpg_init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_png_init
</UL>

<P><STRONG><a name="[283]"></a>gt_img_decoder_open</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, gt_img_decoder.o(i.gt_img_decoder_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gt_img_decoder_open &rArr; gt_memset &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
</UL>

<P><STRONG><a name="[164]"></a>gt_img_decoder_read_line</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, gt_img_decoder.o(i.gt_img_decoder_read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gt_img_decoder_read_line &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_filling_by_sjpg_file
</UL>

<P><STRONG><a name="[1ab]"></a>gt_img_decoder_register</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gt_img_decoder.o(i.gt_img_decoder_register))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_img_decoder_init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_sjpg_init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_png_init
</UL>

<P><STRONG><a name="[2f8]"></a>gt_img_decoder_set_close_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gt_img_decoder.o(i.gt_img_decoder_set_close_cb))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_sjpg_init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_png_init
</UL>

<P><STRONG><a name="[2f5]"></a>gt_img_decoder_set_info_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gt_img_decoder.o(i.gt_img_decoder_set_info_cb))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_sjpg_init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_png_init
</UL>

<P><STRONG><a name="[2f6]"></a>gt_img_decoder_set_open_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gt_img_decoder.o(i.gt_img_decoder_set_open_cb))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_sjpg_init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_png_init
</UL>

<P><STRONG><a name="[2f7]"></a>gt_img_decoder_set_read_line_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gt_img_decoder.o(i.gt_img_decoder_set_read_line_cb))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_sjpg_init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_png_init
</UL>

<P><STRONG><a name="[159]"></a>gt_img_get_src</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gt_img.o(i.gt_img_get_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_img_get_src
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_type
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_cb
</UL>

<P><STRONG><a name="[2cf]"></a>gt_img_set_src</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, gt_img.o(i.gt_img_set_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gt_img_set_src &rArr; gt_event_send &rArr; _gt_event_send_kernel &rArr;  _gt_event_send_kernel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_type
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init_screen_home
</UL>

<P><STRONG><a name="[2d1]"></a>gt_indev_drv_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gt_hal_indev.o(i.gt_indev_drv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gt_indev_drv_init &rArr; gt_memset &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_port_indev_init
</UL>

<P><STRONG><a name="[2d2]"></a>gt_indev_drv_register</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, gt_hal_indev.o(i.gt_indev_drv_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gt_indev_drv_register &rArr; _gt_timer_create &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset_0
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_port_indev_init
</UL>

<P><STRONG><a name="[1b8]"></a>gt_indev_get_dev_by_idx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gt_hal_indev.o(i.gt_indev_get_dev_by_idx))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_handler
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_indev_remove_want_delate_target
</UL>

<P><STRONG><a name="[1b7]"></a>gt_indev_get_dev_count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gt_hal_indev.o(i.gt_indev_get_dev_count))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_handler
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_indev_remove_want_delate_target
</UL>

<P><STRONG><a name="[8f]"></a>gt_indev_handler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, gt_indev.o(i.gt_indev_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = gt_indev_handler &rArr; _gt_indev_handler_point &rArr; _indev_pressed_handle &rArr; _indev_scroll_handler &rArr; gt_obj_scroll_to &rArr; gt_anim_start &rArr; _gt_anim_free_task &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_get_dev_count
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_get_dev_by_idx
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_is_disabled
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_indev_handler_point
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_indev_handler_keypad
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_indev_handler_button
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_hal_indev.o(i.gt_indev_drv_register)
</UL>
<P><STRONG><a name="[2d3]"></a>gt_indev_is_disabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gt_indev.o(i.gt_indev_is_disabled))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_handler
</UL>

<P><STRONG><a name="[1fe]"></a>gt_indev_set_disabled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gt_indev.o(i.gt_indev_set_disabled))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scr_anim_start_cb
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scr_anim_ready_cb
</UL>

<P><STRONG><a name="[2d4]"></a>gt_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gt_handler.o(i.gt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = gt_init &rArr; gt_port_disp_init &rArr; gt_disp_drv_register &rArr; _gt_disp_create &rArr; gt_obj_class_create &rArr; gt_layout_row_grow &rArr; _row_grow_inside_invert &rArr;  _row_grow_inside_invert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_port_vf_init
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_port_src_init
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_port_indev_init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_port_disp_init
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_mem_init
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_core_init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_img_decoder_init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_extra_init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_core_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>gt_init_screen_home</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, gt_init_screen_home.o(i.gt_init_screen_home))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = gt_init_screen_home &rArr; gt_textarea_create &rArr; gt_obj_class_create &rArr; gt_layout_row_grow &rArr; _row_grow_inside_invert &rArr;  _row_grow_inside_invert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_size
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_pos
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_screen_set_bgcolor
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_set_src
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_create
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_create
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_textarea_set_font_thick_en
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_textarea_set_font_thick_cn
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_textarea_set_font_size
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_textarea_set_font_gray
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_textarea_set_font_family_cn
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_textarea_set_font_color
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_textarea_set_font_align
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_textarea_set_bg_color
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_textarea_create
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_textarea_add_str
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_color_hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_ui.o(.constdata)
</UL>
<P><STRONG><a name="[2e8]"></a>gt_layout_row_grow</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, gt_layout.o(i.gt_layout_row_grow))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = gt_layout_row_grow &rArr; _row_grow_inside_invert &rArr;  _row_grow_inside_invert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_row_grow_inside_invert
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_row_grow_inside
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_w
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_class_create
</UL>

<P><STRONG><a name="[178]"></a>gt_map</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gt_math.o(i.gt_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_map
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_path_linear
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_path_bounce
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_calc_path_by_bezier
</UL>

<P><STRONG><a name="[2d5]"></a>gt_mem_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gt_mem.o(i.gt_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gt_mem_init &rArr; gt_tlsf_create_with_pool &rArr; gt_tlsf_add_pool &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_create_with_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init
</UL>

<P><STRONG><a name="[136]"></a>gt_memcmp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gt_mem.o(i.gt_memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gt_memcmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_symbol_get_mask_buf
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_jpg
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_info
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_common_sjpg_open
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_common_sjpg_info
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_png_file_type
</UL>

<P><STRONG><a name="[1ca]"></a>gt_memcpy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gt_mem.o(i.gt_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_start
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_load_scr_anim
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_push
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_right_to_left_handler
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_get_dot
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_realloc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_func
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_read_line
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_png_read_line
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_cb
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_textarea_add_str
</UL>

<P><STRONG><a name="[15e]"></a>gt_memmove</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gt_mem.o(i.gt_memmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_memmove &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fill_color_hor
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_destroy_screen
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_destroy_from_parent
</UL>

<P><STRONG><a name="[184]"></a>gt_memset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gt_mem.o(i.gt_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_memset &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_reset_areas
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_create
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_clear
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_drv_init
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_open
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_graph_init_rect_attr
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_get_one_word_width
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_single_line
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_multiple_line
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_create
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_sjpg_st
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_create
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_set_src
</UL>

<P><STRONG><a name="[12f]"></a>gt_memset_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gt_mem.o(i.gt_memset_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_memset_0 &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_init
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_src_init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_drv_register
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_get_radius_mask_buf
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_get_radius_mask
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_text_convertor_split
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_common_png_info
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_hal_fp_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_class_create
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_convertor_string_width
</UL>

<P><STRONG><a name="[2b2]"></a>gt_obj_check_scr</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gt_obj_pos.o(i.gt_obj_check_scr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gt_obj_check_scr &rArr; gt_disp_get_scr
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_class_get_type
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_scr
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
</UL>

<P><STRONG><a name="[1be]"></a>gt_obj_child_set_prop</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, gt_style.o(i.gt_obj_child_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + In Cycle
<LI>Call Chain = gt_obj_child_set_prop &rArr;  gt_obj_child_set_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_focus
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_visible
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_untouchability
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_overflow
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_opa
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_inside
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_focus_disabled
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_fixed
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_disabled
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_child_set_prop
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_destroy
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_child_set_prop
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_inherent_attr_from_parent
</UL>

<P><STRONG><a name="[186]"></a>gt_obj_class_create</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, gt_obj_class.o(i.gt_obj_class_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = gt_obj_class_create &rArr; gt_layout_row_grow &rArr; _row_grow_inside_invert &rArr;  _row_grow_inside_invert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset_0
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_layout_row_grow
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_inherent_attr_from_parent
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_new_screen_obj
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_obj_to_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_create
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_create
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_create
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_textarea_create
</UL>

<P><STRONG><a name="[125]"></a>gt_obj_class_get_type</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gt_obj_class.o(i.gt_obj_class_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_check_scr
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_and_copy_foreach
</UL>

<P><STRONG><a name="[2db]"></a>gt_obj_create</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gt_obj.o(i.gt_obj_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = gt_obj_create &rArr; gt_obj_class_create &rArr; gt_layout_row_grow &rArr; _row_grow_inside_invert &rArr;  _row_grow_inside_invert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_class_create
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init_screen_home
</UL>

<P><STRONG><a name="[1fb]"></a>gt_obj_destroy</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gt_obj.o(i.gt_obj_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = gt_obj_destroy &rArr; gt_obj_child_set_prop &rArr;  gt_obj_child_set_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_set_repeat_count
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_create
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_child_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scr_anim_ready_cb
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scr_anim_del_ready_cb
</UL>

<P><STRONG><a name="[1d2]"></a>gt_obj_get_click_point_by_phy_point</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, gt_obj_pos.o(i.gt_obj_get_click_point_by_phy_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gt_obj_get_click_point_by_phy_point &rArr; gt_disp_get_area_act &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_copy
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_area_act
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_pressed_handle
</UL>

<P><STRONG><a name="[1f7]"></a>gt_obj_get_h</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gt_style.o(i.gt_obj_get_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_get_h &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_row_grow_inside_invert
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_row_grow_inside
</UL>

<P><STRONG><a name="[1e8]"></a>gt_obj_get_mask_effect</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gt_style.o(i.gt_obj_get_mask_effect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_get_mask_effect &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unmasked_effect_handler
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_event_cb
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_cb
</UL>

<P><STRONG><a name="[19a]"></a>gt_obj_get_parent</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gt_obj.o(i.gt_obj_get_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_get_parent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_event_send_kernel
</UL>

<P><STRONG><a name="[123]"></a>gt_obj_get_reduce</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gt_style.o(i.gt_obj_get_reduce))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_get_reduce &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_and_copy_foreach
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_cb
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_cb
</UL>

<P><STRONG><a name="[1df]"></a>gt_obj_get_scroll_snap_x</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gt_style.o(i.gt_obj_get_scroll_snap_x))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_scroll_throw_handler
</UL>

<P><STRONG><a name="[1dc]"></a>gt_obj_get_scroll_snap_y</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gt_style.o(i.gt_obj_get_scroll_snap_y))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_scroll_throw_handler
</UL>

<P><STRONG><a name="[1ea]"></a>gt_obj_get_septal_line</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gt_style.o(i.gt_obj_get_septal_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_get_septal_line &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_cb
</UL>

<P><STRONG><a name="[120]"></a>gt_obj_get_state</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gt_style.o(i.gt_obj_get_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_get_state &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_cb
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_change_state_by_trigger_mode
</UL>

<P><STRONG><a name="[1c4]"></a>gt_obj_get_touch_parent</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gt_style.o(i.gt_obj_get_touch_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_get_touch_parent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_foreach_clicked
</UL>

<P><STRONG><a name="[11f]"></a>gt_obj_get_trigger_mode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gt_style.o(i.gt_obj_get_trigger_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_get_trigger_mode &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_change_state_by_trigger_mode
</UL>

<P><STRONG><a name="[11b]"></a>gt_obj_get_virtual</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gt_style.o(i.gt_obj_get_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_get_virtual &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_y
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_x
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_foreach_clicked
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_row_grow_inside_invert
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_row_grow_inside
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_size
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_pos
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_max_area_recursive
</UL>

<P><STRONG><a name="[11a]"></a>gt_obj_get_visible</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gt_style.o(i.gt_obj_get_visible))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_get_visible &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_check_obj_visible_and_copy
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_check_and_copy_foreach
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_foreach_clicked
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_hided_layer_top_widgets
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_row_grow_inside_invert
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_row_grow_inside
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_max_area_recursive
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_find_showing_recursive_by_type
</UL>

<P><STRONG><a name="[1f9]"></a>gt_obj_get_w</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gt_style.o(i.gt_obj_get_w))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_get_w &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_row_grow_inside_invert
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_row_grow_inside
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_layout_row_grow
</UL>

<P><STRONG><a name="[20a]"></a>gt_obj_get_x</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gt_style.o(i.gt_obj_get_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_get_x &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_layer_top_widget_area
</UL>

<P><STRONG><a name="[1f6]"></a>gt_obj_get_y</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gt_style.o(i.gt_obj_get_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_get_y &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_row_grow_inside_invert
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_row_grow_inside
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_layer_top_widget_area
</UL>

<P><STRONG><a name="[19b]"></a>gt_obj_is_bubble_notify</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gt_style.o(i.gt_obj_is_bubble_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_is_bubble_notify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_event_send_kernel
</UL>

<P><STRONG><a name="[2b1]"></a>gt_obj_is_child</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gt_obj.o(i.gt_obj_is_child))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_is_child &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
</UL>

<P><STRONG><a name="[1e4]"></a>gt_obj_is_show_bg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gt_obj.o(i.gt_obj_is_show_bg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_obj_is_show_bg
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_type
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_cb
</UL>

<P><STRONG><a name="[166]"></a>gt_obj_is_type</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gt_obj_class.o(i.gt_obj_is_type))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_screen_get_bgcolor
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_screen_set_bgcolor
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_set_src
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_get_src
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_show_bg
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_screen_scroll
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_textarea_set_font_thick_en
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_textarea_set_font_thick_cn
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_textarea_set_font_size
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_textarea_set_font_gray
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_textarea_set_font_family_cn
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_textarea_set_font_color
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_textarea_set_font_align
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_textarea_set_bg_color
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_textarea_add_str
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_find_showing_recursive_by_type
</UL>

<P><STRONG><a name="[1b0]"></a>gt_obj_is_untouchability</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gt_style.o(i.gt_obj_is_untouchability))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_released_handle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_pressed_handle
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_indev_handler_keypad
</UL>

<P><STRONG><a name="[1b1]"></a>gt_obj_next_focus_change</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gt_obj_pos.o(i.gt_obj_next_focus_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gt_obj_next_focus_change &rArr; gt_obj_set_focus &rArr; gt_event_send &rArr; _gt_event_send_kernel &rArr;  _gt_event_send_kernel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_scr
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_focus
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_next_focus_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_indev_handler_keypad
</UL>

<P><STRONG><a name="[20b]"></a>gt_obj_pos_change</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, gt_style.o(i.gt_obj_pos_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = gt_obj_pos_change &rArr; _gt_disp_refr_append_area &rArr; gt_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_append_area
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_area
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_layer_top_widget_area
</UL>

<P><STRONG><a name="[1b2]"></a>gt_obj_prev_focus_change</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, gt_obj_pos.o(i.gt_obj_prev_focus_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gt_obj_prev_focus_change &rArr; gt_obj_set_focus &rArr; gt_event_send &rArr; _gt_event_send_kernel &rArr;  _gt_event_send_kernel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_scr
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_focus
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_prev_focus_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_indev_handler_keypad
</UL>

<P><STRONG><a name="[1da]"></a>gt_obj_scroll_to</STRONG> (Thumb, 264 bytes, Stack size 104 bytes, gt_obj_scroll.o(i.gt_obj_scroll_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = gt_obj_scroll_to &rArr; gt_anim_start &rArr; _gt_anim_free_task &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_res_ver
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_res_hor
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_start
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_set_path_type
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_speed_to_time
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_del
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_set_process_scroll_xy
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_scroll_to_y
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_scroll_to_x
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_scroll_throw_handler
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_scroll_handler
</UL>

<P><STRONG><a name="[201]"></a>gt_obj_scroll_to_x</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gt_obj_scroll.o(i.gt_obj_scroll_to_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = gt_obj_scroll_to_x &rArr; gt_obj_scroll_to &rArr; gt_anim_start &rArr; _gt_anim_free_task &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_scroll_to
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_screen_event_cb
</UL>

<P><STRONG><a name="[1ff]"></a>gt_obj_scroll_to_y</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gt_obj_scroll.o(i.gt_obj_scroll_to_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = gt_obj_scroll_to_y &rArr; gt_obj_scroll_to &rArr; gt_anim_start &rArr; _gt_anim_free_task &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_scroll_to
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_screen_event_cb
</UL>

<P><STRONG><a name="[2f4]"></a>gt_obj_set_area</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, gt_style.o(i.gt_obj_set_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = gt_obj_set_area &rArr; _update_layer_top_widget_area &rArr; gt_event_send &rArr; _gt_event_send_kernel &rArr;  _gt_event_send_kernel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_update_max_area
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_pos_change
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_is_ignore_calc_max_area
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_layer_top_widget_area
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_y
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_x
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_pos
</UL>

<P><STRONG><a name="[2ef]"></a>gt_obj_set_disabled</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gt_style.o(i.gt_obj_set_disabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gt_obj_set_disabled &rArr; gt_event_send &rArr; _gt_event_send_kernel &rArr;  _gt_event_send_kernel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_child_set_prop
</UL>

<P><STRONG><a name="[2f0]"></a>gt_obj_set_fixed</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gt_style.o(i.gt_obj_set_fixed))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_set_fixed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_child_set_prop
</UL>

<P><STRONG><a name="[2ed]"></a>gt_obj_set_focus</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gt_style.o(i.gt_obj_set_focus))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gt_obj_set_focus &rArr; gt_event_send &rArr; _gt_event_send_kernel &rArr;  _gt_event_send_kernel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_prev_focus_change
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_next_focus_change
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_child_set_prop
</UL>

<P><STRONG><a name="[2ee]"></a>gt_obj_set_focus_disabled</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gt_style.o(i.gt_obj_set_focus_disabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gt_obj_set_focus_disabled &rArr; gt_event_send &rArr; _gt_event_send_kernel &rArr;  _gt_event_send_kernel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_child_set_prop
</UL>

<P><STRONG><a name="[2f1]"></a>gt_obj_set_inside</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gt_style.o(i.gt_obj_set_inside))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_set_inside &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_child_set_prop
</UL>

<P><STRONG><a name="[2f2]"></a>gt_obj_set_opa</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gt_style.o(i.gt_obj_set_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gt_obj_set_opa &rArr; gt_event_send &rArr; _gt_event_send_kernel &rArr;  _gt_event_send_kernel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_child_set_prop
</UL>

<P><STRONG><a name="[1bd]"></a>gt_obj_set_overflow</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gt_style.o(i.gt_obj_set_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_set_overflow &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_child_set_prop
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_inherent_attr_from_parent
</UL>

<P><STRONG><a name="[1f8]"></a>gt_obj_set_pos</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, gt_style.o(i.gt_obj_set_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = gt_obj_set_pos &rArr; gt_obj_set_area &rArr; _update_layer_top_widget_area &rArr; gt_event_send &rArr; _gt_event_send_kernel &rArr;  _gt_event_send_kernel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_virtual
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_area
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_move_child_by
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_layer_top_widget_area
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_row_grow_inside_invert
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_row_grow_inside
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init_screen_home
</UL>

<P><STRONG><a name="[1d9]"></a>gt_obj_set_scroll_lr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gt_style.o(i.gt_obj_set_scroll_lr))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_scroll_handler
</UL>

<P><STRONG><a name="[1d8]"></a>gt_obj_set_scroll_ud</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gt_style.o(i.gt_obj_set_scroll_ud))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_scroll_handler
</UL>

<P><STRONG><a name="[2dd]"></a>gt_obj_set_size</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, gt_style.o(i.gt_obj_set_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gt_obj_set_size &rArr; gt_event_send &rArr; _gt_event_send_kernel &rArr;  _gt_event_send_kernel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_update_max_area
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_virtual
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_size_change
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_is_ignore_calc_max_area
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init_screen_home
</UL>

<P><STRONG><a name="[121]"></a>gt_obj_set_state</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gt_style.o(i.gt_obj_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_set_state &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_change_state_by_trigger_mode
</UL>

<P><STRONG><a name="[2f3]"></a>gt_obj_set_untouchability</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gt_style.o(i.gt_obj_set_untouchability))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_set_untouchability &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_child_set_prop
</UL>

<P><STRONG><a name="[188]"></a>gt_obj_set_virtual</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gt_style.o(i.gt_obj_set_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_set_virtual &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_create
</UL>

<P><STRONG><a name="[2ec]"></a>gt_obj_set_visible</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gt_style.o(i.gt_obj_set_visible))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gt_obj_set_visible &rArr; gt_event_send &rArr; _gt_event_send_kernel &rArr;  _gt_event_send_kernel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_child_set_prop
</UL>

<P><STRONG><a name="[1fc]"></a>gt_obj_set_x</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, gt_style.o(i.gt_obj_set_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = gt_obj_set_x &rArr; gt_obj_set_area &rArr; _update_layer_top_widget_area &rArr; gt_event_send &rArr; _gt_event_send_kernel &rArr;  _gt_event_send_kernel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_virtual
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_area
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_layer_top_widget_area
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_load_scr_anim
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scr_anim_exec_x_cb
</UL>

<P><STRONG><a name="[1fd]"></a>gt_obj_set_y</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, gt_style.o(i.gt_obj_set_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = gt_obj_set_y &rArr; gt_obj_set_area &rArr; _update_layer_top_widget_area &rArr; gt_event_send &rArr; _gt_event_send_kernel &rArr;  _gt_event_send_kernel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_virtual
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_area
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_layer_top_widget_area
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_load_scr_anim
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scr_anim_exec_y_cb
</UL>

<P><STRONG><a name="[15b]"></a>gt_obj_size_change</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, gt_style.o(i.gt_obj_size_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = gt_obj_size_change &rArr; _gt_disp_refr_append_area &rArr; gt_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_append_area
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_size
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_cb
</UL>

<P><STRONG><a name="[117]"></a>gt_per_255</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gt_math.o(i.gt_per_255))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_draw_blend_text
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_blend_rgb565_with_opacity
</UL>

<P><STRONG><a name="[19d]"></a>gt_png_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gt_png.o(i.gt_png_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gt_png_init &rArr; gt_img_decoder_create &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_set_read_line_cb
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_set_open_cb
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_set_info_cb
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_set_close_cb
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_register
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_create
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_extra_init
</UL>

<P><STRONG><a name="[2d7]"></a>gt_port_disp_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gt_port_disp.o(i.gt_port_disp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = gt_port_disp_init &rArr; gt_disp_drv_register &rArr; _gt_disp_create &rArr; gt_obj_class_create &rArr; gt_layout_row_grow &rArr; _row_grow_inside_invert &rArr;  _row_grow_inside_invert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_graph_buf_init
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_drv_register
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_drv_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init
</UL>

<P><STRONG><a name="[2d8]"></a>gt_port_indev_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, gt_port_indev.o(i.gt_port_indev_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gt_port_indev_init &rArr; gt_indev_drv_register &rArr; _gt_timer_create &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_drv_register
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_drv_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init
</UL>

<P><STRONG><a name="[2da]"></a>gt_port_src_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gt_port_src.o(i.gt_port_src_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gt_port_src_init &rArr; gt_src_init &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_src_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init
</UL>

<P><STRONG><a name="[2d9]"></a>gt_port_vf_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gt_port_vf.o(i.gt_port_vf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gt_port_vf_init &rArr; gt_vf_init &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_vf_init
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_vf_drv_register
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init
</UL>

<P><STRONG><a name="[bb]"></a>gt_read_data</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, bsp_spi_flash.o(i.gt_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gt_read_data &rArr; spi_byte_write
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_reset
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_byte_write
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_byte_read
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_Font_Init
</UL>

<P><STRONG><a name="[197]"></a>gt_refr_timer</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gt_refr.o(i.gt_refr_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = gt_refr_timer &rArr; gt_disp_ref_area &rArr; _flush_scr_by_anim &rArr; _gt_disp_check_and_copy_foreach &rArr; _check_and_copy_foreach &rArr;  _check_and_copy_foreach (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_default
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_ref_area
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_get_area
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_check
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_area_pop
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_task_handler
</UL>

<P><STRONG><a name="[28a]"></a>gt_right_to_left_handler</STRONG> (Thumb, 498 bytes, Stack size 80 bytes, gt_font.o(i.gt_right_to_left_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = gt_right_to_left_handler &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memcpy
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_one_char_code_len_get
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_punctuation
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_font_language_split
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_font_lang_and_punctuation_split
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_single_line
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_multiple_line
</UL>

<P><STRONG><a name="[2c0]"></a>gt_scr_stack_clear</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gt_scr_stack.o(i.gt_scr_stack_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_scr_stack_clear &rArr; gt_stack_iterator
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_iterator
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_clear
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_scr_info
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_stack_push_scr_only_st
</UL>

<P><STRONG><a name="[2ba]"></a>gt_scr_stack_get_home_scr_id</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gt_scr_stack.o(i.gt_scr_stack_get_home_scr_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_scr_stack_get_home_scr_id
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_scr_info
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_stack_push_scr_only_st
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_pop
</UL>

<P><STRONG><a name="[141]"></a>gt_scr_stack_get_init_func</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gt_scr_stack.o(i.gt_scr_stack_get_init_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_scr_stack_get_init_func
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_scr_info
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_scr_by_id
</UL>

<P><STRONG><a name="[2bb]"></a>gt_scr_stack_has_before</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gt_scr_stack.o(i.gt_scr_stack_has_before))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gt_scr_stack_has_before &rArr; gt_stack_search_item_from_bottom
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_search_item_from_bottom
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_scr_info
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_stack_push_scr_only_st
</UL>

<P><STRONG><a name="[2bf]"></a>gt_scr_stack_is_empty</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gt_scr_stack.o(i.gt_scr_stack_is_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_scr_stack_is_empty
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_is_empty
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_scr_info
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_stack_push_scr_only_st
</UL>

<P><STRONG><a name="[2be]"></a>gt_scr_stack_is_home_scr_alive</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gt_scr_stack.o(i.gt_scr_stack_is_home_scr_alive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_scr_stack_is_home_scr_alive
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_scr_info
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_stack_push_scr_only_st
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_pop
</UL>

<P><STRONG><a name="[2bd]"></a>gt_scr_stack_peek</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gt_scr_stack.o(i.gt_scr_stack_peek))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_scr_stack_peek
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_peek
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_scr_info
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_stack_push_scr_only_st
</UL>

<P><STRONG><a name="[2bc]"></a>gt_scr_stack_pop</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, gt_scr_stack.o(i.gt_scr_stack_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = gt_scr_stack_pop &rArr; _gt_obj_class_destroy &rArr; _destroy_and_free_children &rArr;  _destroy_and_free_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_pop
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_get_count
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_destroy
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_scr_info
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_is_home_scr_alive
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_get_home_scr_id
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_stack_push_scr_only_st
</UL>

<P><STRONG><a name="[2c2]"></a>gt_scr_stack_push</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gt_scr_stack.o(i.gt_scr_stack_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gt_scr_stack_push &rArr; gt_stack_push &rArr; gt_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_push
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_scr_info
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_stack_push_scr_only_st
</UL>

<P><STRONG><a name="[30c]"></a>gt_scr_stack_register_id_list</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gt_scr_stack.o(i.gt_scr_stack_register_id_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gt_scr_stack_register_id_list &rArr; gt_scr_stack_set_depth &rArr; gt_stack_create &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_scr_info
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_set_depth
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_ui_init
</UL>

<P><STRONG><a name="[30d]"></a>gt_scr_stack_set_depth</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, gt_scr_stack.o(i.gt_scr_stack_set_depth))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gt_scr_stack_set_depth &rArr; gt_stack_create &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_destroy
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_create
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_scr_info
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_register_id_list
</UL>

<P><STRONG><a name="[2c1]"></a>gt_scr_stack_set_home_scr</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gt_scr_stack.o(i.gt_scr_stack_set_home_scr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_scr_stack_set_home_scr
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_scr_info
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_stack_push_scr_only_st
</UL>

<P><STRONG><a name="[310]"></a>gt_scr_stack_set_home_scr_id</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gt_scr_stack.o(i.gt_scr_stack_set_home_scr_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gt_scr_stack_set_home_scr_id
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_scr_info
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_ui_init
</UL>

<P><STRONG><a name="[16a]"></a>gt_screen_get_bgcolor</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gt_obj.o(i.gt_screen_get_bgcolor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gt_screen_get_bgcolor &rArr; gt_color_make
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_type
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flush_scr_by_direct
</UL>

<P><STRONG><a name="[187]"></a>gt_screen_set_bgcolor</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gt_obj.o(i.gt_screen_set_bgcolor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gt_screen_set_bgcolor
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_type
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_create
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init_screen_home
</UL>

<P><STRONG><a name="[19e]"></a>gt_sjpg_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gt_sjpg.o(i.gt_sjpg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gt_sjpg_init &rArr; gt_img_decoder_create &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_set_read_line_cb
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_set_open_cb
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_set_info_cb
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_set_close_cb
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_register
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_create
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_extra_init
</UL>

<P><STRONG><a name="[2cd]"></a>gt_src_get_drv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gt_hal_src.o(i.gt_src_get_drv))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_open
</UL>

<P><STRONG><a name="[2fb]"></a>gt_src_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gt_hal_src.o(i.gt_src_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gt_src_init &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset_0
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_port_src_init
</UL>

<P><STRONG><a name="[305]"></a>gt_stack_clear</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gt_stack.o(i.gt_stack_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_stack_clear &rArr; gt_memset &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_clear
</UL>

<P><STRONG><a name="[30f]"></a>gt_stack_create</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gt_stack.o(i.gt_stack_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gt_stack_create &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_set_depth
</UL>

<P><STRONG><a name="[30e]"></a>gt_stack_destroy</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gt_stack.o(i.gt_stack_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gt_stack_destroy &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_set_depth
</UL>

<P><STRONG><a name="[309]"></a>gt_stack_get_count</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gt_stack.o(i.gt_stack_get_count))
<BR><BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_pop
</UL>

<P><STRONG><a name="[307]"></a>gt_stack_is_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gt_stack.o(i.gt_stack_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_pop
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_peek_by
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_is_empty
</UL>

<P><STRONG><a name="[313]"></a>gt_stack_is_full</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gt_stack.o(i.gt_stack_is_full))
<BR><BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_push
</UL>

<P><STRONG><a name="[304]"></a>gt_stack_iterator</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, gt_stack.o(i.gt_stack_iterator))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gt_stack_iterator
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_clear
</UL>

<P><STRONG><a name="[308]"></a>gt_stack_peek</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gt_stack.o(i.gt_stack_peek))
<BR><BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_peek
</UL>

<P><STRONG><a name="[311]"></a>gt_stack_peek_by</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gt_stack.o(i.gt_stack_peek_by), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_is_empty
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_item_top_by_index
</UL>

<P><STRONG><a name="[30a]"></a>gt_stack_pop</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gt_stack.o(i.gt_stack_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_stack_pop
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_is_empty
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_item_top_by_index
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_pop
</UL>

<P><STRONG><a name="[30b]"></a>gt_stack_push</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, gt_stack.o(i.gt_stack_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gt_stack_push &rArr; gt_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memcpy
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_is_full
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_push
</UL>

<P><STRONG><a name="[306]"></a>gt_stack_search_item_from_bottom</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, gt_stack.o(i.gt_stack_search_item_from_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gt_stack_search_item_from_bottom
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_has_before
</UL>

<P><STRONG><a name="[28f]"></a>gt_symbol_get_mask_buf</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, gt_symbol.o(i.gt_symbol_get_mask_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_symbol_get_mask_buf &rArr; gt_unicode_to_utf8
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memcmp
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_unicode_to_utf8
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_single_line
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_multiple_line
</UL>

<P><STRONG><a name="[28e]"></a>gt_symbol_is_valid_range</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gt_symbol.o(i.gt_symbol_is_valid_range))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_get_one_word_width
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_single_line
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_multiple_line
</UL>

<P><STRONG><a name="[315]"></a>gt_task_handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gt_handler.o(i.gt_task_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gt_task_handler &rArr; _gt_timer_handler &rArr; _gt_timer_remove_task &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e6]"></a>gt_textarea_add_str</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, gt_textarea.o(i.gt_textarea_add_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = gt_textarea_add_str &rArr; _mem_realloc &rArr; gt_tlsf_realloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memcpy
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_realloc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_type
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init_screen_home
</UL>

<P><STRONG><a name="[2de]"></a>gt_textarea_create</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, gt_textarea.o(i.gt_textarea_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = gt_textarea_create &rArr; gt_obj_class_create &rArr; gt_layout_row_grow &rArr; _row_grow_inside_invert &rArr;  _row_grow_inside_invert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_class_create
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_info_init
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init_screen_home
</UL>

<P><STRONG><a name="[2e7]"></a>gt_textarea_set_bg_color</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gt_textarea.o(i.gt_textarea_set_bg_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gt_textarea_set_bg_color &rArr; gt_event_send &rArr; _gt_event_send_kernel &rArr;  _gt_event_send_kernel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_type
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init_screen_home
</UL>

<P><STRONG><a name="[2e2]"></a>gt_textarea_set_font_align</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gt_textarea.o(i.gt_textarea_set_font_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_textarea_set_font_align
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_type
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init_screen_home
</UL>

<P><STRONG><a name="[2df]"></a>gt_textarea_set_font_color</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, gt_textarea.o(i.gt_textarea_set_font_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gt_textarea_set_font_color &rArr; gt_event_send &rArr; _gt_event_send_kernel &rArr;  _gt_event_send_kernel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_type
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init_screen_home
</UL>

<P><STRONG><a name="[2e1]"></a>gt_textarea_set_font_family_cn</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gt_textarea.o(i.gt_textarea_set_font_family_cn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gt_textarea_set_font_family_cn
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_type
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init_screen_home
</UL>

<P><STRONG><a name="[2e5]"></a>gt_textarea_set_font_gray</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gt_textarea.o(i.gt_textarea_set_font_gray))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gt_textarea_set_font_gray
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_type
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init_screen_home
</UL>

<P><STRONG><a name="[2e0]"></a>gt_textarea_set_font_size</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gt_textarea.o(i.gt_textarea_set_font_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gt_textarea_set_font_size &rArr; gt_event_send &rArr; _gt_event_send_kernel &rArr;  _gt_event_send_kernel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_info_update_font_thick
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_type
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init_screen_home
</UL>

<P><STRONG><a name="[2e4]"></a>gt_textarea_set_font_thick_cn</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gt_textarea.o(i.gt_textarea_set_font_thick_cn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gt_textarea_set_font_thick_cn
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_info_update_font_thick
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_type
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init_screen_home
</UL>

<P><STRONG><a name="[2e3]"></a>gt_textarea_set_font_thick_en</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gt_textarea.o(i.gt_textarea_set_font_thick_en))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gt_textarea_set_font_thick_en
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_info_update_font_thick
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_type
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init_screen_home
</UL>

<P><STRONG><a name="[181]"></a>gt_tick_elapse</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gt_hal_tick.o(i.gt_tick_elapse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_tick_elapse
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_task_handler
</UL>

<P><STRONG><a name="[182]"></a>gt_tick_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gt_hal_tick.o(i.gt_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_start
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_handler
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_scroll_throw_handler_anim_start
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_pressed_handle
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_indev_handler_button
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_set_paused
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_create
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_task_handler
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tick_elapse
</UL>

<P><STRONG><a name="[107]"></a>gt_tick_inc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gt_hal_tick.o(i.gt_tick_inc))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[319]"></a>gt_tlsf_add_pool</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, gt_tlsf.o(i.gt_tlsf_add_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gt_tlsf_add_pool &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_create_with_pool
</UL>

<P><STRONG><a name="[31a]"></a>gt_tlsf_create</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, gt_tlsf.o(i.gt_tlsf_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_tlsf_create &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_create_with_pool
</UL>

<P><STRONG><a name="[2e9]"></a>gt_tlsf_create_with_pool</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gt_tlsf.o(i.gt_tlsf_create_with_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gt_tlsf_create_with_pool &rArr; gt_tlsf_add_pool &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_create
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_add_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_mem_init
</UL>

<P><STRONG><a name="[1ec]"></a>gt_tlsf_free</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gt_tlsf.o(i.gt_tlsf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_remove
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_free
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_absorb
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_realloc
</UL>

<P><STRONG><a name="[1ed]"></a>gt_tlsf_malloc</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gt_tlsf.o(i.gt_tlsf_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_request_size
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_realloc
</UL>

<P><STRONG><a name="[1ee]"></a>gt_tlsf_realloc</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, gt_tlsf.o(i.gt_tlsf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gt_tlsf_realloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memcpy
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_malloc
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_free
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_used
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_can_split
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_request_size
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_realloc
</UL>

<P><STRONG><a name="[31c]"></a>gt_ui_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gt_ui.o(i.gt_ui_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = gt_ui_init &rArr; gt_disp_stack_load_scr &rArr; gt_disp_stack_load_scr_anim_st &rArr; gt_disp_load_scr_anim &rArr; gt_disp_ref_area &rArr; _flush_scr_by_anim &rArr; _gt_disp_check_and_copy_foreach &rArr; _check_and_copy_foreach &rArr;  _check_and_copy_foreach (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_stack_load_scr
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_set_home_scr_id
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_register_id_list
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[314]"></a>gt_unicode_to_utf8</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, gt_font.o(i.gt_unicode_to_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gt_unicode_to_utf8
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_symbol_get_mask_buf
</UL>

<P><STRONG><a name="[2fd]"></a>gt_vf_drv_register</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, gt_hal_vf.o(i.gt_vf_drv_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gt_vf_drv_register
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_vf_get_drv
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_port_vf_init
</UL>

<P><STRONG><a name="[1f1]"></a>gt_vf_get_drv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gt_hal_vf.o(i.gt_vf_get_drv))
<BR><BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_vf_drv_register
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_open
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_open_cb
</UL>

<P><STRONG><a name="[2fc]"></a>gt_vf_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, gt_hal_vf.o(i.gt_vf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gt_vf_init &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_port_vf_init
</UL>

<P><STRONG><a name="[1ce]"></a>jd_decomp</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, tjpgd.o(i.jd_decomp))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = jd_decomp &rArr; mcu_load &rArr; block_idct
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_output
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_read_line
</UL>

<P><STRONG><a name="[138]"></a>jd_prepare</STRONG> (Thumb, 676 bytes, Stack size 40 bytes, tjpgd.o(i.jd_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = jd_prepare &rArr; create_huffman_tbl
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_huffman_tbl
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_pool
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_read_line
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_common_sjpg_open
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_common_sjpg_info
</UL>

<P><STRONG><a name="[20e]"></a>lcd__init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_test.o(i.lcd__init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = lcd__init &rArr; lcd_init &rArr; xmc_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_bsp_init
</UL>

<P><STRONG><a name="[327]"></a>lcd_clear</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, at_surf_f437_board_lcd.o(i.lcd_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lcd_clear &rArr; lcd_windows_set
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_windows_set
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[167]"></a>lcd_color_fill</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, at_surf_f437_board_lcd.o(i.lcd_color_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_color_fill &rArr; lcd_windows_set
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_windows_set
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flush_cb
</UL>

<P><STRONG><a name="[32c]"></a>lcd_command_read</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at_surf_f437_board_lcd.o(i.lcd_command_read))
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_id_read
</UL>

<P><STRONG><a name="[32a]"></a>lcd_command_write</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at_surf_f437_board_lcd.o(i.lcd_command_write))
<BR><BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_direction
</UL>

<P><STRONG><a name="[329]"></a>lcd_direction</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, at_surf_f437_board_lcd.o(i.lcd_direction))
<BR><BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[32b]"></a>lcd_id_read</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, at_surf_f437_board_lcd.o(i.lcd_id_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_id_read
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_read
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[326]"></a>lcd_init</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, at_surf_f437_board_lcd.o(i.lcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = lcd_init &rArr; xmc_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmc_init
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_id_read
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_direction
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd__init
</UL>

<P><STRONG><a name="[32f]"></a>lcd_ram_prepare_write</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at_surf_f437_board_lcd.o(i.lcd_ram_prepare_write))
<BR><BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_windows_set
</UL>

<P><STRONG><a name="[328]"></a>lcd_windows_set</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, at_surf_f437_board_lcd.o(i.lcd_windows_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcd_windows_set
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ram_prepare_write
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_color_fill
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>

<P><STRONG><a name="[332]"></a>lodepng_add_text</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lodepng.o(i.lodepng_add_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lodepng_add_text
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_tEXt
</UL>

<P><STRONG><a name="[26e]"></a>lodepng_chunk_append</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lodepng.o(i.lodepng_chunk_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lodepng_chunk_append &rArr; lodepng_realloc &rArr; _mem_realloc &rArr; gt_tlsf_realloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_length
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_realloc
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_addofl
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[26f]"></a>lodepng_chunk_check_crc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lodepng.o(i.lodepng_chunk_check_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lodepng_chunk_check_crc &rArr; lodepng_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_crc32
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_length
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_read32bitInt
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[25e]"></a>lodepng_chunk_length</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lodepng.o(i.lodepng_chunk_length))
<BR><BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_read32bitInt
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inspect
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_next_const
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_check_crc
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_append
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[270]"></a>lodepng_chunk_next_const</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lodepng.o(i.lodepng_chunk_next_const))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lodepng_chunk_next_const
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_length
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_addofl
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[25f]"></a>lodepng_chunk_type_equals</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lodepng.o(i.lodepng_chunk_type_equals))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lodepng_chunk_type_equals
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inspect
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[336]"></a>lodepng_clear_icc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lodepng.o(i.lodepng_clear_icc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lodepng_clear_icc &rArr; string_cleanup &rArr; lodepng_free &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_cleanup
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_cleanup
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iCCP
</UL>

<P><STRONG><a name="[338]"></a>lodepng_color_mode_copy</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lodepng.o(i.lodepng_color_mode_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lodepng_color_mode_copy &rArr; lodepng_palette_clear &rArr; lodepng_free &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_palette_clear
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_memcpy
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
</UL>

<P><STRONG><a name="[349]"></a>lodepng_color_mode_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lodepng.o(i.lodepng_color_mode_init))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_state_init
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_init
</UL>

<P><STRONG><a name="[33a]"></a>lodepng_convert</STRONG> (Thumb, 500 bytes, Stack size 152 bytes, lodepng.o(i.lodepng_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lodepng_convert &rArr; color_tree_cleanup &rArr;  color_tree_cleanup (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_raw_size
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgba8ToPixel
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgba16ToPixel
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_memcpy
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_equal
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPixelColorsRGBA8
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPixelColorsRGB8
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPixelColorRGBA8
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPixelColorRGBA16
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_init
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
</UL>

<P><STRONG><a name="[335]"></a>lodepng_crc32</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, lodepng.o(i.lodepng_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lodepng_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inspect
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_check_crc
</UL>

<P><STRONG><a name="[33f]"></a>lodepng_decode</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, lodepng.o(i.lodepng_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = lodepng_decode &rArr; decodeGeneric &rArr; postProcessScanlines &rArr; Adam7_deinterlace &rArr; Adam7_getpassvalues
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_raw_size
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_copy
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_equal
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode_memory
</UL>

<P><STRONG><a name="[133]"></a>lodepng_decode32</STRONG> (Thumb, 18 bytes, Stack size 32 bytes, lodepng.o(i.lodepng_decode32))
<BR><BR>[Stack]<UL><LI>Max Depth = 1028<LI>Call Chain = lodepng_decode32 &rArr; lodepng_decode_memory &rArr; lodepng_decode &rArr; decodeGeneric &rArr; postProcessScanlines &rArr; Adam7_deinterlace &rArr; Adam7_getpassvalues
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode_memory
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_common_png_open
</UL>

<P><STRONG><a name="[340]"></a>lodepng_decode_memory</STRONG> (Thumb, 70 bytes, Stack size 384 bytes, lodepng.o(i.lodepng_decode_memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 996<LI>Call Chain = lodepng_decode_memory &rArr; lodepng_decode &rArr; decodeGeneric &rArr; postProcessScanlines &rArr; Adam7_deinterlace &rArr; Adam7_getpassvalues
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_state_init
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_state_cleanup
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode32
</UL>

<P><STRONG><a name="[34c]"></a>lodepng_decoder_settings_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lodepng.o(i.lodepng_decoder_settings_init))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_state_init
</UL>

<P><STRONG><a name="[3d7]"></a>lodepng_decompress_settings_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lodepng.o(i.lodepng_decompress_settings_init), UNUSED)

<P><STRONG><a name="[134]"></a>lodepng_error_text</STRONG> (Thumb, 3656 bytes, Stack size 0 bytes, lodepng.o(i.lodepng_error_text))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_common_png_open
</UL>

<P><STRONG><a name="[271]"></a>lodepng_get_bpp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lodepng.o(i.lodepng_get_bpp))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postProcessScanlines
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_pixel_overflow
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[274]"></a>lodepng_get_raw_size</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lodepng.o(i.lodepng_get_raw_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lodepng_get_raw_size &rArr; lodepng_get_bpp_lct
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_bpp_lct
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[347]"></a>lodepng_info_cleanup</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lodepng.o(i.lodepng_info_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lodepng_info_cleanup &rArr; LodePNGText_cleanup &rArr; string_cleanup &rArr; lodepng_free &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_palette_clear
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_clear_icc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGUnknownChunks_cleanup
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGText_cleanup
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGIText_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_state_cleanup
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inspect
</UL>

<P><STRONG><a name="[348]"></a>lodepng_info_init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, lodepng.o(i.lodepng_info_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lodepng_info_init
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_init
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGUnknownChunks_init
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_state_init
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inspect
</UL>

<P><STRONG><a name="[25c]"></a>lodepng_inspect</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, lodepng.o(i.lodepng_inspect))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lodepng_inspect &rArr; lodepng_info_cleanup &rArr; LodePNGText_cleanup &rArr; string_cleanup &rArr; lodepng_free &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_init
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_cleanup
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_crc32
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_type_equals
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_length
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_read32bitInt
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[1c9]"></a>lodepng_load_file</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, lodepng.o(i.lodepng_load_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lodepng_load_file &rArr; lodepng_malloc &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_tell
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_seek
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_read
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_open
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_close
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_png_open
</UL>

<P><STRONG><a name="[339]"></a>lodepng_palette_clear</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lodepng.o(i.lodepng_palette_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lodepng_palette_clear &rArr; lodepng_free &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_state_cleanup
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_cleanup
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_copy
</UL>

<P><STRONG><a name="[342]"></a>lodepng_state_cleanup</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lodepng.o(i.lodepng_state_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lodepng_state_cleanup &rArr; lodepng_info_cleanup &rArr; LodePNGText_cleanup &rArr; string_cleanup &rArr; lodepng_free &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_palette_clear
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode_memory
</UL>

<P><STRONG><a name="[341]"></a>lodepng_state_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lodepng.o(i.lodepng_state_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lodepng_state_init &rArr; lodepng_info_init
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_init
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decoder_settings_init
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_init
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode_memory
</UL>

<P><STRONG><a name="[6c]"></a>main</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 9400<LI>Call Chain = main &rArr; application &rArr; copy_file_to_qspi_flash &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_write_disk &rArr; sd_mult_blocks_write &rArr; sdio_command_data_send &rArr; sd_init &rArr; speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_config
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_ui_init
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_task_handler
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_Font_Init
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[353]"></a>mmc_switch</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, at_surf_f437_board_sd_card.o(i.mmc_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mmc_switch &rArr; sd_status_send &rArr; command_rsp1_error
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_response_get
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_state_machine_enable
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_config
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_status_send
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rsp1_error
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_change
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_wide_bus_operation_config
</UL>

<P><STRONG><a name="[381]"></a>nvic_irq_enable</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, at32f435_437_misc.o(i.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_init
</UL>

<P><STRONG><a name="[34f]"></a>nvic_priority_group_config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at32f435_437_misc.o(i.nvic_priority_group_config))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[36b]"></a>qspi_auto_ispc_enable</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, at32f435_437_qspi.o(i.qspi_auto_ispc_enable))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_init
</UL>

<P><STRONG><a name="[36a]"></a>qspi_busy_config</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_qspi.o(i.qspi_busy_config))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_init
</UL>

<P><STRONG><a name="[35e]"></a>qspi_byte_read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f435_437_qspi.o(i.qspi_byte_read))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_data_read
</UL>

<P><STRONG><a name="[361]"></a>qspi_byte_write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f435_437_qspi.o(i.qspi_byte_write))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_data_write
</UL>

<P><STRONG><a name="[368]"></a>qspi_clk_division_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_qspi.o(i.qspi_clk_division_set))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_init
</UL>

<P><STRONG><a name="[35a]"></a>qspi_cmd_operation_kick</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, at32f435_437_qspi.o(i.qspi_cmd_operation_kick))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_erase
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_data_write
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_data_read
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_write_enable
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_busy_check
</UL>

<P><STRONG><a name="[35c]"></a>qspi_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f435_437_qspi.o(i.qspi_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_erase
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_data_write
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_data_read
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_write_enable
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_busy_check
</UL>

<P><STRONG><a name="[35b]"></a>qspi_flag_get</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, at32f435_437_qspi.o(i.qspi_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_erase
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_data_write
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_data_read
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_write_enable
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_busy_check
</UL>

<P><STRONG><a name="[358]"></a>qspi_flash_busy_check</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, at_surf_f437_board_qspi_flash.o(i.qspi_flash_busy_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = qspi_flash_busy_check
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flag_get
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flag_clear
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_cmd_operation_kick
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_cmd_rdsr_config
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_erase
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_data_write
</UL>

<P><STRONG><a name="[362]"></a>qspi_flash_cmd_erase_config</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, at_surf_f437_board_qspi_flash.o(i.qspi_flash_cmd_erase_config))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_erase
</UL>

<P><STRONG><a name="[359]"></a>qspi_flash_cmd_rdsr_config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, at_surf_f437_board_qspi_flash.o(i.qspi_flash_cmd_rdsr_config))
<BR><BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_busy_check
</UL>

<P><STRONG><a name="[35d]"></a>qspi_flash_cmd_read_config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, at_surf_f437_board_qspi_flash.o(i.qspi_flash_cmd_read_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = qspi_flash_cmd_read_config
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_data_read
</UL>

<P><STRONG><a name="[36c]"></a>qspi_flash_cmd_wren_config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, at_surf_f437_board_qspi_flash.o(i.qspi_flash_cmd_wren_config))
<BR><BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_write_enable
</UL>

<P><STRONG><a name="[360]"></a>qspi_flash_cmd_write_config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, at_surf_f437_board_qspi_flash.o(i.qspi_flash_cmd_write_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = qspi_flash_cmd_write_config
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_data_write
</UL>

<P><STRONG><a name="[249]"></a>qspi_flash_data_read</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, at_surf_f437_board_qspi_flash.o(i.qspi_flash_data_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = qspi_flash_data_read &rArr; qspi_flash_cmd_read_config
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flag_get
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flag_clear
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_cmd_operation_kick
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_byte_read
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_cmd_read_config
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_file_to_qspi_flash
</UL>

<P><STRONG><a name="[247]"></a>qspi_flash_data_write</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, at_surf_f437_board_qspi_flash.o(i.qspi_flash_data_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = qspi_flash_data_write &rArr; qspi_flash_write_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flag_get
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flag_clear
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_cmd_operation_kick
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_byte_write
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_write_enable
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_cmd_write_config
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_busy_check
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_file_to_qspi_flash
</UL>

<P><STRONG><a name="[243]"></a>qspi_flash_erase</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, at_surf_f437_board_qspi_flash.o(i.qspi_flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = qspi_flash_erase &rArr; qspi_flash_write_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flag_get
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flag_clear
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_cmd_operation_kick
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_write_enable
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_cmd_erase_config
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_busy_check
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_file_to_qspi_flash
</UL>

<P><STRONG><a name="[210]"></a>qspi_flash_init</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, at_surf_f437_board_qspi_flash.o(i.qspi_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = qspi_flash_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_xip_enable
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_sck_mode_set
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_clk_division_set
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_busy_config
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_mux_config
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_auto_ispc_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_bsp_init
</UL>

<P><STRONG><a name="[35f]"></a>qspi_flash_write_enable</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, at_surf_f437_board_qspi_flash.o(i.qspi_flash_write_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = qspi_flash_write_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flag_get
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flag_clear
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_cmd_operation_kick
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_cmd_wren_config
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_erase
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_data_write
</UL>

<P><STRONG><a name="[369]"></a>qspi_sck_mode_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_qspi.o(i.qspi_sck_mode_set))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_init
</UL>

<P><STRONG><a name="[367]"></a>qspi_xip_enable</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, at32f435_437_qspi.o(i.qspi_xip_enable))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_init
</UL>

<P><STRONG><a name="[ce]"></a>r_dat_bat</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_spi_flash.o(i.r_dat_bat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = r_dat_bat &rArr; spiflash_read &rArr; spi_bytes_read
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnicodeToGBK
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GBKToUnicode
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBhDetailData
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFontAddr
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_hz
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_fh
</UL>

<P><STRONG><a name="[99]"></a>read_cb</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.read_cb))
<BR>[Address Reference Count : 1]<UL><LI> gt_port_indev.o(i.gt_port_indev_init)
</UL>
<P><STRONG><a name="[9a]"></a>read_cb_btn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.read_cb_btn))
<BR>[Address Reference Count : 1]<UL><LI> gt_port_indev.o(i.gt_port_indev_init)
</UL>
<P><STRONG><a name="[289]"></a>right_to_left_lan_get</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, gt_font.o(i.right_to_left_lan_get))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_single_line
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_multiple_line
</UL>

<P><STRONG><a name="[36e]"></a>scr_find</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, at_surf_f437_board_sd_card.o(i.scr_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = scr_find &rArr; command_rsp1_error
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_get
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_clear
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_data_state_machine_enable
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_data_read
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_data_config
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_state_machine_enable
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_config
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rsp1_error
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_init
</UL>

<P><STRONG><a name="[372]"></a>sd_block_read</STRONG> (Thumb, 234 bytes, Stack size 64 bytes, at_surf_f437_board_sd_card.o(i.sd_block_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sd_block_read &rArr; sdio_command_data_send &rArr; sd_init &rArr; speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_response_get
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_data_state_machine_enable
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_data_config
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_state_machine_enable
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_config
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_data_send
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rsp1_error
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_read_disk
</UL>

<P><STRONG><a name="[375]"></a>sd_block_write</STRONG> (Thumb, 316 bytes, Stack size 72 bytes, at_surf_f437_board_sd_card.o(i.sd_block_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = sd_block_write &rArr; sdio_command_data_send &rArr; sd_init &rArr; speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_response_get
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_clear
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_data_state_machine_enable
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_data_config
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_state_machine_enable
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_config
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_data_send
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_status_send
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rsp1_error
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_card_programming
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_write_disk
</UL>

<P><STRONG><a name="[376]"></a>sd_bus_wide_enable</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, at_surf_f437_board_sd_card.o(i.sd_bus_wide_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sd_bus_wide_enable &rArr; command_rsp1_error
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_response_get
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_state_machine_enable
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_config
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rsp1_error
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_wide_bus_operation_config
</UL>

<P><STRONG><a name="[384]"></a>sd_card_info_get</STRONG> (Thumb, 526 bytes, Stack size 32 bytes, at_surf_f437_board_sd_card.o(i.sd_card_info_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sd_card_info_get
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_init
</UL>

<P><STRONG><a name="[377]"></a>sd_card_init</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, at_surf_f437_board_sd_card.o(i.sd_card_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sd_card_init &rArr; command_rsp6_error
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_response_get
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_power_status_get
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_state_machine_enable
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_config
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rsp6_error
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rsp2_error
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_init
</UL>

<P><STRONG><a name="[379]"></a>sd_deselect_select</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, at_surf_f437_board_sd_card.o(i.sd_deselect_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sd_deselect_select &rArr; command_rsp1_error
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_state_machine_enable
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_config
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rsp1_error
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_init
</UL>

<P><STRONG><a name="[387]"></a>sd_device_mode_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at_surf_f437_board_sd_card.o(i.sd_device_mode_set))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_init
</UL>

<P><STRONG><a name="[37a]"></a>sd_dma_config</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, at_surf_f437_board_sd_card.o(i.sd_dma_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sd_dma_config &rArr; crm_periph_clock_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmamux_init
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmamux_enable
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_reset
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_default_para_init
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_data_send
</UL>

<P><STRONG><a name="[27f]"></a>sd_init</STRONG> (Thumb, 426 bytes, Stack size 32 bytes, at_surf_f437_board_sd_card.o(i.sd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sd_init &rArr; speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_mux_config
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_reset
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_change
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_clock_set
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_wide_bus_operation_config
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_power_on
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_device_mode_set
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_deselect_select
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_info_get
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scr_find
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_data_send
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[106]"></a>sd_irq_service</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, at_surf_f437_board_sd_card.o(i.sd_irq_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sd_irq_service &rArr; command_rsp1_error
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_interrupt_flag_get
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_clear
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_state_machine_enable
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_config
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rsp1_error
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO2_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO1_IRQHandler
</UL>

<P><STRONG><a name="[38b]"></a>sd_mult_blocks_read</STRONG> (Thumb, 244 bytes, Stack size 64 bytes, at_surf_f437_board_sd_card.o(i.sd_mult_blocks_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sd_mult_blocks_read &rArr; sdio_command_data_send &rArr; sd_init &rArr; speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_response_get
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_data_state_machine_enable
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_data_config
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_state_machine_enable
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_config
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_data_send
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rsp1_error
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_read_disk
</UL>

<P><STRONG><a name="[38c]"></a>sd_mult_blocks_write</STRONG> (Thumb, 426 bytes, Stack size 72 bytes, at_surf_f437_board_sd_card.o(i.sd_mult_blocks_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = sd_mult_blocks_write &rArr; sdio_command_data_send &rArr; sd_init &rArr; speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_response_get
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_clear
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_data_state_machine_enable
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_data_config
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_state_machine_enable
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_config
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_data_send
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_status_send
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rsp1_error
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_card_programming
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_write_disk
</UL>

<P><STRONG><a name="[383]"></a>sd_power_on</STRONG> (Thumb, 496 bytes, Stack size 40 bytes, at_surf_f437_board_sd_card.o(i.sd_power_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sd_power_on &rArr; command_rsp7_error
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_response_get
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_power_set
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_power_saving_mode_enable
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flow_control_enable
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_state_machine_enable
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_config
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_clock_enable
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_clock_config
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_clock_bypass
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_bus_width_config
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rsp7_error
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rsp3_error
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rsp1_error
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_error
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_init
</UL>

<P><STRONG><a name="[281]"></a>sd_read_disk</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, at_surf_f437_board_diskio.o(i.sd_read_disk))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = sd_read_disk &rArr; sd_mult_blocks_read &rArr; sdio_command_data_send &rArr; sd_init &rArr; speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_mult_blocks_read
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_read
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[354]"></a>sd_status_send</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, at_surf_f437_board_sd_card.o(i.sd_status_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sd_status_send &rArr; command_rsp1_error
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_response_get
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_state_machine_enable
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_config
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rsp1_error
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_switch
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_mult_blocks_write
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
</UL>

<P><STRONG><a name="[394]"></a>sd_switch</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, at_surf_f437_board_sd_card.o(i.sd_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_state_machine_enable
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_config
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_data_send
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rsp1_error
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_change
</UL>

<P><STRONG><a name="[388]"></a>sd_wide_bus_operation_config</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, at_surf_f437_board_sd_card.o(i.sd_wide_bus_operation_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sd_wide_bus_operation_config &rArr; mmc_switch &rArr; sd_status_send &rArr; command_rsp1_error
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_bus_width_config
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_bus_wide_enable
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_init
</UL>

<P><STRONG><a name="[282]"></a>sd_write_disk</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, at_surf_f437_board_diskio.o(i.sd_write_disk))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sd_write_disk &rArr; sd_mult_blocks_write &rArr; sdio_command_data_send &rArr; sd_init &rArr; speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_mult_blocks_write
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[38e]"></a>sdio_bus_width_config</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_sdio.o(i.sdio_bus_width_config))
<BR><BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_wide_bus_operation_config
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_power_on
</UL>

<P><STRONG><a name="[390]"></a>sdio_clock_bypass</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_sdio.o(i.sdio_clock_bypass))
<BR><BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_power_on
</UL>

<P><STRONG><a name="[38d]"></a>sdio_clock_config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, at32f435_437_sdio.o(i.sdio_clock_config))
<BR><BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_power_on
</UL>

<P><STRONG><a name="[393]"></a>sdio_clock_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_sdio.o(i.sdio_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_power_on
</UL>

<P><STRONG><a name="[386]"></a>sdio_clock_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at_surf_f437_board_sd_card.o(i.sdio_clock_set))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_init
</UL>

<P><STRONG><a name="[22f]"></a>sdio_command_config</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, at32f435_437_sdio.o(i.sdio_command_config))
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_data_send
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_switch
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_status_send
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_power_on
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_irq_service
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_deselect_select
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_bus_wide_enable
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scr_find
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_switch
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_card_programming
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_mult_blocks_write
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_mult_blocks_read
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_read
</UL>

<P><STRONG><a name="[374]"></a>sdio_command_data_send</STRONG> (Thumb, 614 bytes, Stack size 40 bytes, at_surf_f437_board_sd_card.o(i.sdio_command_data_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = sdio_command_data_send &rArr; sd_init &rArr; speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_get
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_clear
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_dma_enable
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_data_write
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_data_state_machine_enable
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_data_read
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_data_config
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_state_machine_enable
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_config
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_dma_config
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rsp1_error
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_init
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_switch
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_mult_blocks_write
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_mult_blocks_read
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_read
</UL>

<P><STRONG><a name="[233]"></a>sdio_command_response_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at32f435_437_sdio.o(i.sdio_command_response_get))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rsp6_error
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rsp1_error
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_card_programming
</UL>

<P><STRONG><a name="[230]"></a>sdio_command_state_machine_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_sdio.o(i.sdio_command_state_machine_enable))
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_data_send
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_switch
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_status_send
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_power_on
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_irq_service
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_deselect_select
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_bus_wide_enable
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scr_find
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_switch
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_card_programming
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_mult_blocks_write
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_mult_blocks_read
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_read
</UL>

<P><STRONG><a name="[36f]"></a>sdio_data_config</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, at32f435_437_sdio.o(i.sdio_data_config))
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_data_send
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scr_find
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_mult_blocks_write
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_mult_blocks_read
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_read
</UL>

<P><STRONG><a name="[371]"></a>sdio_data_read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f435_437_sdio.o(i.sdio_data_read))
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_data_send
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scr_find
</UL>

<P><STRONG><a name="[370]"></a>sdio_data_state_machine_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_sdio.o(i.sdio_data_state_machine_enable))
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_data_send
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scr_find
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_mult_blocks_write
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_mult_blocks_read
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_read
</UL>

<P><STRONG><a name="[396]"></a>sdio_data_write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f435_437_sdio.o(i.sdio_data_write))
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_data_send
</UL>

<P><STRONG><a name="[395]"></a>sdio_dma_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_sdio.o(i.sdio_dma_enable))
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_data_send
</UL>

<P><STRONG><a name="[232]"></a>sdio_flag_clear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f435_437_sdio.o(i.sdio_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_data_send
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_irq_service
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scr_find
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rsp7_error
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rsp6_error
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rsp3_error
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rsp2_error
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rsp1_error
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_error
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_card_programming
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_mult_blocks_write
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
</UL>

<P><STRONG><a name="[231]"></a>sdio_flag_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f435_437_sdio.o(i.sdio_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_data_send
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scr_find
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rsp6_error
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rsp3_error
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rsp2_error
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rsp1_error
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_error
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_card_programming
</UL>

<P><STRONG><a name="[38f]"></a>sdio_flow_control_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_sdio.o(i.sdio_flow_control_enable))
<BR><BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_power_on
</UL>

<P><STRONG><a name="[38a]"></a>sdio_interrupt_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f435_437_sdio.o(i.sdio_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_irq_service
</UL>

<P><STRONG><a name="[389]"></a>sdio_interrupt_flag_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at32f435_437_sdio.o(i.sdio_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_irq_service
</UL>

<P><STRONG><a name="[391]"></a>sdio_power_saving_mode_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_sdio.o(i.sdio_power_saving_mode_enable))
<BR><BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_power_on
</UL>

<P><STRONG><a name="[392]"></a>sdio_power_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_sdio.o(i.sdio_power_set))
<BR><BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_power_on
</UL>

<P><STRONG><a name="[378]"></a>sdio_power_status_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at32f435_437_sdio.o(i.sdio_power_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
</UL>

<P><STRONG><a name="[382]"></a>sdio_reset</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at32f435_437_sdio.o(i.sdio_reset))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_init
</UL>

<P><STRONG><a name="[234]"></a>sdio_response_get</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, at32f435_437_sdio.o(i.sdio_response_get))
<BR><BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_status_send
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_power_on
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_bus_wide_enable
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_switch
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rsp6_error
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_rsp1_error
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_card_programming
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_mult_blocks_write
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_mult_blocks_read
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_read
</UL>

<P><STRONG><a name="[385]"></a>speed_change</STRONG> (Thumb, 114 bytes, Stack size 72 bytes, at_surf_f437_board_sd_card.o(i.speed_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_switch
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_init
</UL>

<P><STRONG><a name="[300]"></a>spi_byte_read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_spi_flash.o(i.spi_byte_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_byte_read &rArr; spi_byte_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read_sr1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_read_data
</UL>

<P><STRONG><a name="[2ff]"></a>spi_byte_write</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bsp_spi_flash.o(i.spi_byte_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_byte_write
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_dma_transmitter_enable
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_dma_receiver_enable
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_sector_erase
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_write_enable
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read_sr1
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_page_write
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_byte_read
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_read_data
</UL>

<P><STRONG><a name="[39c]"></a>spi_bytes_read</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, bsp_spi_flash.o(i.spi_bytes_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spi_bytes_read
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read
</UL>

<P><STRONG><a name="[39d]"></a>spi_bytes_write</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bsp_spi_flash.o(i.spi_bytes_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spi_bytes_write
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_page_write
</UL>

<P><STRONG><a name="[39e]"></a>spi_default_para_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at32f435_437_spi.o(i.spi_default_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
</UL>

<P><STRONG><a name="[3a0]"></a>spi_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_spi.o(i.spi_enable))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
</UL>

<P><STRONG><a name="[212]"></a>spi_flash_data_test</STRONG> (Thumb, 116 bytes, Stack size 8208 bytes, bsp_spi_flash.o(i.spi_flash_data_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 8336<LI>Call Chain = spi_flash_data_test &rArr; spiflash_write &rArr; spiflash_write_nocheck &rArr; spiflash_page_write &rArr; spiflash_wait_busy &rArr; spiflash_read_sr1 &rArr; spi_byte_write
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_write
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_sector_erase
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_bsp_init
</UL>

<P><STRONG><a name="[39b]"></a>spi_i2s_data_receive</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f435_437_spi.o(i.spi_i2s_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_bytes_write
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_bytes_read
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_byte_write
</UL>

<P><STRONG><a name="[399]"></a>spi_i2s_data_transmit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f435_437_spi.o(i.spi_i2s_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_bytes_write
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_bytes_read
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_byte_write
</UL>

<P><STRONG><a name="[398]"></a>spi_i2s_dma_receiver_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_spi.o(i.spi_i2s_dma_receiver_enable))
<BR><BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_byte_write
</UL>

<P><STRONG><a name="[397]"></a>spi_i2s_dma_transmitter_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_spi.o(i.spi_i2s_dma_transmitter_enable))
<BR><BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_byte_write
</UL>

<P><STRONG><a name="[39a]"></a>spi_i2s_flag_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f435_437_spi.o(i.spi_i2s_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_bytes_write
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_bytes_read
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_byte_write
</UL>

<P><STRONG><a name="[39f]"></a>spi_init</STRONG> (Thumb, 274 bytes, Stack size 0 bytes, at32f435_437_spi.o(i.spi_init))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
</UL>

<P><STRONG><a name="[9b]"></a>spi_wr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(i.spi_wr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = spi_wr &rArr; spiflash_read &rArr; spi_bytes_read
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_port_vf.o(i.gt_port_vf_init)
</UL>
<P><STRONG><a name="[211]"></a>spiflash_init</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, bsp_spi_flash.o(i.spiflash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = spiflash_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_mux_config
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_default_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_data_test
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_bsp_init
</UL>

<P><STRONG><a name="[3a1]"></a>spiflash_page_write</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, bsp_spi_flash.o(i.spiflash_page_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = spiflash_page_write &rArr; spiflash_wait_busy &rArr; spiflash_read_sr1 &rArr; spi_byte_write
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_reset
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_write_enable
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_wait_busy
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_bytes_write
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_write_nocheck
</UL>

<P><STRONG><a name="[248]"></a>spiflash_read</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, bsp_spi_flash.o(i.spiflash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = spiflash_read &rArr; spi_bytes_read
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_reset
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_bytes_read
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_wr
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_write
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_data_test
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_file_to_qspi_flash
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dat_bat
</UL>

<P><STRONG><a name="[3a4]"></a>spiflash_read_sr1</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bsp_spi_flash.o(i.spiflash_read_sr1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spiflash_read_sr1 &rArr; spi_byte_write
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_reset
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_byte_write
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_byte_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_wait_busy
</UL>

<P><STRONG><a name="[242]"></a>spiflash_sector_erase</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bsp_spi_flash.o(i.spiflash_sector_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = spiflash_sector_erase &rArr; spiflash_wait_busy &rArr; spiflash_read_sr1 &rArr; spi_byte_write
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_reset
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_write_enable
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_wait_busy
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_write
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_data_test
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_file_to_qspi_flash
</UL>

<P><STRONG><a name="[3a3]"></a>spiflash_wait_busy</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_spi_flash.o(i.spiflash_wait_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spiflash_wait_busy &rArr; spiflash_read_sr1 &rArr; spi_byte_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read_sr1
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_sector_erase
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_page_write
</UL>

<P><STRONG><a name="[245]"></a>spiflash_write</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, bsp_spi_flash.o(i.spiflash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = spiflash_write &rArr; spiflash_write_nocheck &rArr; spiflash_page_write &rArr; spiflash_wait_busy &rArr; spiflash_read_sr1 &rArr; spi_byte_write
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_sector_erase
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_write_nocheck
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_data_test
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_file_to_qspi_flash
</UL>

<P><STRONG><a name="[3a2]"></a>spiflash_write_enable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_spi_flash.o(i.spiflash_write_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spiflash_write_enable &rArr; spi_byte_write
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_reset
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_sector_erase
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_page_write
</UL>

<P><STRONG><a name="[3a5]"></a>spiflash_write_nocheck</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bsp_spi_flash.o(i.spiflash_write_nocheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = spiflash_write_nocheck &rArr; spiflash_page_write &rArr; spiflash_wait_busy &rArr; spiflash_read_sr1 &rArr; spi_byte_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_page_write
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_write
</UL>

<P><STRONG><a name="[34e]"></a>system_clock_config</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, at32f435_437_clock.o(i.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = system_clock_config &rArr; system_core_clock_update &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_reset
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_pll_config
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_hext_stable_wait
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_flag_get
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clock_source_enable
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_auto_step_mode_enable
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_apb2_div_set
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_apb1_div_set
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_ahb_div_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3ae]"></a>system_core_clock_update</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, system_at32f435_437.o(i.system_core_clock_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = system_core_clock_update &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[277]"></a>systick_clock_source_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at32f435_437_misc.o(i.systick_clock_source_config))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[20d]"></a>uart_print_init</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, at_surf_f437_board_usart.o(i.uart_print_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = uart_print_init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmitter_enable
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_mux_config
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_bsp_init
</UL>

<P><STRONG><a name="[109]"></a>usart_data_receive</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f435_437_usart.o(i.usart_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[29d]"></a>usart_data_transmit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at32f435_437_usart.o(i.usart_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[3b1]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_usart.o(i.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print_init
</UL>

<P><STRONG><a name="[10a]"></a>usart_flag_clear</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f435_437_usart.o(i.usart_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[108]"></a>usart_flag_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_usart.o(i.usart_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[3af]"></a>usart_init</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, at32f435_437_usart.o(i.usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print_init
</UL>

<P><STRONG><a name="[3b0]"></a>usart_transmitter_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_usart.o(i.usart_transmitter_enable))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print_init
</UL>

<P><STRONG><a name="[22c]"></a>wdt_counter_reload</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_wdt.o(i.wdt_counter_reload))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_wdt_init
</UL>

<P><STRONG><a name="[22a]"></a>wdt_divider_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32f435_437_wdt.o(i.wdt_divider_set))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_wdt_init
</UL>

<P><STRONG><a name="[22d]"></a>wdt_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f435_437_wdt.o(i.wdt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_wdt_init
</UL>

<P><STRONG><a name="[229]"></a>wdt_register_write_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32f435_437_wdt.o(i.wdt_register_write_enable))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_wdt_init
</UL>

<P><STRONG><a name="[22b]"></a>wdt_reload_value_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f435_437_wdt.o(i.wdt_reload_value_set))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_wdt_init
</UL>

<P><STRONG><a name="[3b8]"></a>xmc_ext_timing_config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, at32f435_437_xmc.o(i.xmc_ext_timing_config))
<BR><BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmc_init
</UL>

<P><STRONG><a name="[32d]"></a>xmc_init</STRONG> (Thumb, 808 bytes, Stack size 136 bytes, at_surf_f437_board_lcd.o(i.xmc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = xmc_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmc_norsram_timing_default_para_init
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmc_norsram_default_para_init
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmc_nor_sram_timing_config
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmc_nor_sram_init
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmc_nor_sram_enable
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_mux_config
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmc_ext_timing_config
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[3b9]"></a>xmc_nor_sram_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f435_437_xmc.o(i.xmc_nor_sram_enable))
<BR><BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmc_init
</UL>

<P><STRONG><a name="[3b5]"></a>xmc_nor_sram_init</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, at32f435_437_xmc.o(i.xmc_nor_sram_init))
<BR><BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmc_init
</UL>

<P><STRONG><a name="[3b7]"></a>xmc_nor_sram_timing_config</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, at32f435_437_xmc.o(i.xmc_nor_sram_timing_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xmc_nor_sram_timing_config
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmc_init
</UL>

<P><STRONG><a name="[3b4]"></a>xmc_norsram_default_para_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, at32f435_437_xmc.o(i.xmc_norsram_default_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmc_init
</UL>

<P><STRONG><a name="[3b6]"></a>xmc_norsram_timing_default_para_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, at32f435_437_xmc.o(i.xmc_norsram_timing_default_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xmc_norsram_timing_default_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmc_init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[9d]"></a>_equal_current_id_cb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gt_scr_stack.o(i._equal_current_id_cb))
<BR>[Address Reference Count : 1]<UL><LI> gt_scr_stack.o(i.gt_scr_stack_has_before)
</UL>
<P><STRONG><a name="[9c]"></a>_free_alive_scr_object_cb</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gt_scr_stack.o(i._free_alive_scr_object_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _free_alive_scr_object_cb &rArr; _gt_obj_class_destroy &rArr; _destroy_and_free_children &rArr;  _destroy_and_free_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_destroy
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_scr_stack.o(i.gt_scr_stack_clear)
</UL>
<P><STRONG><a name="[112]"></a>_adjust_clip_area_and_flush</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gt_disp.o(i._adjust_clip_area_and_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = _adjust_clip_area_and_flush &rArr; _gt_disp_check_and_copy_foreach &rArr; _check_and_copy_foreach &rArr;  _check_and_copy_foreach (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_check_and_copy_foreach
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flush_scr_by_anim
</UL>

<P><STRONG><a name="[122]"></a>_check_and_copy_foreach</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, gt_disp.o(i._check_and_copy_foreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + In Cycle
<LI>Call Chain = _check_and_copy_foreach &rArr;  _check_and_copy_foreach (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_reduce
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_class_get_type
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_cover_screen
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_check_obj_visible_and_copy
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_and_copy_foreach
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_check_and_copy_foreach
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_and_copy_foreach
</UL>

<P><STRONG><a name="[127]"></a>_clear_buffer</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, gt_disp.o(i._clear_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _clear_buffer &rArr; _fill_color_hor &rArr; gt_color_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fill_color_ver
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fill_color_hor
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flush_scr_by_anim
</UL>

<P><STRONG><a name="[140]"></a>_create_scr_by_id</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, gt_disp.o(i._create_scr_by_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _create_scr_by_id &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_get_init_func
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_stack_push_scr_only_st
</UL>

<P><STRONG><a name="[128]"></a>_fill_color_hor</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, gt_disp.o(i._fill_color_hor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _fill_color_hor &rArr; gt_color_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memmove
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_color_fill
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_clear_buffer
</UL>

<P><STRONG><a name="[129]"></a>_fill_color_ver</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, gt_disp.o(i._fill_color_ver))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _fill_color_ver &rArr; gt_color_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_color_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_clear_buffer
</UL>

<P><STRONG><a name="[168]"></a>_flush_scr_by_anim</STRONG> (Thumb, 532 bytes, Stack size 48 bytes, gt_disp.o(i._flush_scr_by_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = _flush_scr_by_anim &rArr; _gt_disp_check_and_copy_foreach &rArr; _check_and_copy_foreach &rArr;  _check_and_copy_foreach (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_res_ver
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_res_hor
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_cover_screen
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_abs
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_check_and_copy_foreach
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_clear_buffer
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adjust_clip_area_and_flush
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_ref_area
</UL>

<P><STRONG><a name="[169]"></a>_flush_scr_by_direct</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, gt_disp.o(i._flush_scr_by_direct))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = _flush_scr_by_direct &rArr; _gt_disp_check_and_copy_foreach &rArr; _check_and_copy_foreach &rArr;  _check_and_copy_foreach (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_screen_get_bgcolor
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_color_fill
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_is_intersect_screen
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_area_flush_by_calc_partly_redraw_area
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_check_and_copy_foreach
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_ref_area
</UL>

<P><STRONG><a name="[113]"></a>_gt_disp_check_and_copy_foreach</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, gt_disp.o(i._gt_disp_check_and_copy_foreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = _gt_disp_check_and_copy_foreach &rArr; _check_and_copy_foreach &rArr;  _check_and_copy_foreach (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_visible
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_check_obj_visible_and_copy
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_and_copy_foreach
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flush_scr_by_direct
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flush_scr_by_anim
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adjust_clip_area_and_flush
</UL>

<P><STRONG><a name="[189]"></a>_gt_disp_get_state</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gt_disp.o(i._gt_disp_get_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _gt_disp_get_state &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_ref_area
</UL>

<P><STRONG><a name="[196]"></a>_gt_disp_set_state</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gt_disp.o(i._gt_disp_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _gt_disp_set_state &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_ref_area
</UL>

<P><STRONG><a name="[8a]"></a>_old_scr_anim_ready_cb</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gt_disp.o(i._old_scr_anim_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _old_scr_anim_ready_cb &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_copy
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_disp.o(i.gt_disp_load_scr_anim)
</UL>
<P><STRONG><a name="[89]"></a>_scr_anim_del_ready_cb</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gt_disp.o(i._scr_anim_del_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _scr_anim_del_ready_cb &rArr; gt_obj_destroy &rArr; gt_obj_child_set_prop &rArr;  gt_obj_child_set_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_disp.o(i.gt_disp_load_scr_anim)
</UL>
<P><STRONG><a name="[8d]"></a>_scr_anim_exec_x_cb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gt_disp.o(i._scr_anim_exec_x_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _scr_anim_exec_x_cb &rArr; gt_obj_set_x &rArr; gt_obj_set_area &rArr; _update_layer_top_widget_area &rArr; gt_event_send &rArr; _gt_event_send_kernel &rArr;  _gt_event_send_kernel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_x
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_disp.o(i.gt_disp_load_scr_anim)
</UL>
<P><STRONG><a name="[8e]"></a>_scr_anim_exec_y_cb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gt_disp.o(i._scr_anim_exec_y_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _scr_anim_exec_y_cb &rArr; gt_obj_set_y &rArr; gt_obj_set_area &rArr; _update_layer_top_widget_area &rArr; gt_event_send &rArr; _gt_event_send_kernel &rArr;  _gt_event_send_kernel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_y
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_disp.o(i.gt_disp_load_scr_anim)
</UL>
<P><STRONG><a name="[8c]"></a>_scr_anim_ready_cb</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, gt_disp.o(i._scr_anim_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _scr_anim_ready_cb &rArr; gt_obj_destroy &rArr; gt_obj_child_set_prop &rArr;  gt_obj_child_set_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_destroy
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_set_disabled
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_res_ver
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_res_hor
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_default
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_reload_max_area
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_disp.o(i.gt_disp_load_scr_anim)
</UL>
<P><STRONG><a name="[8b]"></a>_scr_anim_start_cb</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gt_disp.o(i._scr_anim_start_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scr_anim_start_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_set_disabled
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_default
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_disp.o(i.gt_disp_load_scr_anim)
</UL>
<P><STRONG><a name="[16b]"></a>_update_area_flush_by_calc_partly_redraw_area</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, gt_disp.o(i._update_area_flush_by_calc_partly_redraw_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _update_area_flush_by_calc_partly_redraw_area &rArr; gt_disp_get_res_ver
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_res_ver
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_res_hor
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flush_scr_by_direct
</UL>

<P><STRONG><a name="[126]"></a>gt_check_obj_visible_and_copy</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, gt_disp.o(i.gt_check_obj_visible_and_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = gt_check_obj_visible_and_copy &rArr; gt_area_is_intersect_screen &rArr; _gt_area_is_outside_area
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_visible
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_is_intersect_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_check_and_copy_foreach
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_and_copy_foreach
</UL>

<P><STRONG><a name="[145]"></a>_draw_blend_strikethrough</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, gt_draw.o(i._draw_blend_strikethrough))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = _draw_blend_strikethrough &rArr; gt_draw_blend &rArr; gt_draw_blend_with_rgb565_no_opacity &rArr; _blend_rgb565_with_no_opacity &rArr; gt_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_draw_blend
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_single_line
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_multiple_line
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_text_convertor_split
</UL>

<P><STRONG><a name="[147]"></a>_draw_blend_underline</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, gt_draw.o(i._draw_blend_underline))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = _draw_blend_underline &rArr; gt_draw_blend &rArr; gt_draw_blend_with_rgb565_no_opacity &rArr; _blend_rgb565_with_no_opacity &rArr; gt_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_draw_blend
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_single_line
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_multiple_line
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_text_convertor_split
</UL>

<P><STRONG><a name="[14b]"></a>_draw_text_convertor_split</STRONG> (Thumb, 938 bytes, Stack size 192 bytes, gt_draw.o(i._draw_text_convertor_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 1428<LI>Call Chain = _draw_text_convertor_split &rArr; gt_font_get_one_word_width &rArr; GT_Get_Font_Width &rArr; get_vec_font_width &rArr; get_font &rArr; Draw_hz &rArr; getBhDetailData &rArr; bending &rArr; BSpline
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset_0
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_type_get
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_one_char_code_len_get
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_get_word_width_figure_up
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_get_size_length_by_style
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_get_one_word_width
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_convertor_data_get
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_code_transform
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_draw_blend_text
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gray_and_dot_byte_get
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_style_space_y
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_blend_underline
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_blend_strikethrough
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_single_line
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_multiple_line
</UL>

<P><STRONG><a name="[15f]"></a>_filling_by_default_line_mode</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, gt_draw.o(i._filling_by_default_line_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = _filling_by_default_line_mode &rArr; gt_draw_blend &rArr; gt_draw_blend_with_rgb565_no_opacity &rArr; _blend_rgb565_with_no_opacity &rArr; gt_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_is_intersect_screen
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_read_img_offset
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_draw_blend
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
</UL>

<P><STRONG><a name="[162]"></a>_filling_by_ram_data</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gt_draw.o(i._filling_by_ram_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _filling_by_ram_data &rArr; gt_draw_blend &rArr; gt_draw_blend_with_rgb565_no_opacity &rArr; _blend_rgb565_with_no_opacity &rArr; gt_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_draw_blend
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
</UL>

<P><STRONG><a name="[163]"></a>_filling_by_sjpg_file</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, gt_draw.o(i._filling_by_sjpg_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = _filling_by_sjpg_file &rArr; gt_draw_blend &rArr; gt_draw_blend_with_rgb565_no_opacity &rArr; _blend_rgb565_with_no_opacity &rArr; gt_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_is_intersect_screen
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_read_line
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_draw_blend
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
</UL>

<P><STRONG><a name="[28d]"></a>_get_align_start_x</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gt_draw.o(i._get_align_start_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_align_start_x
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_single_line
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_multiple_line
</UL>

<P><STRONG><a name="[16f]"></a>_get_align_start_y</STRONG> (Thumb, 200 bytes, Stack size 64 bytes, gt_draw.o(i._get_align_start_y), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_split
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_align_start_y_by_line
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_multiple_line
</UL>

<P><STRONG><a name="[171]"></a>_get_align_start_y_by_line</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, gt_draw.o(i._get_align_start_y_by_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_align_start_y_by_line
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_style_space_y
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_single_line
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_align_start_y
</UL>

<P><STRONG><a name="[14f]"></a>_get_style_space_y</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gt_draw.o(i._get_style_space_y))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_single_line
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_multiple_line
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_align_start_y_by_line
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_text_convertor_split
</UL>

<P><STRONG><a name="[1a5]"></a>_gt_circ_cont</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gt_draw.o(i._gt_circ_cont))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_get_radius_mask
</UL>

<P><STRONG><a name="[1a4]"></a>_gt_get_radius_mask</STRONG> (Thumb, 796 bytes, Stack size 88 bytes, gt_draw.o(i._gt_get_radius_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _gt_get_radius_mask &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset_0
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_circ_cont
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_radius_mask_init
</UL>

<P><STRONG><a name="[1a6]"></a>_gt_get_radius_mask_buf</STRONG> (Thumb, 560 bytes, Stack size 24 bytes, gt_draw.o(i._gt_get_radius_mask_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _gt_get_radius_mask_buf &rArr; gt_memset_0 &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[155]"></a>_gt_gray_and_dot_byte_get</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, gt_draw.o(i._gt_gray_and_dot_byte_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _gt_gray_and_dot_byte_get
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_single_line
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_multiple_line
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_text_convertor_split
</UL>

<P><STRONG><a name="[1cb]"></a>_gt_radius_mask_deinit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gt_draw.o(i._gt_radius_mask_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _gt_radius_mask_deinit &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[1cc]"></a>_gt_radius_mask_init</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, gt_draw.o(i._gt_radius_mask_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _gt_radius_mask_init &rArr; _gt_get_radius_mask &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_copy
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_get_radius_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[1f0]"></a>_omit_get_font_width</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, gt_draw.o(i._omit_get_font_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 1260<LI>Call Chain = _omit_get_font_width &rArr; gt_font_get_one_word_width &rArr; GT_Get_Font_Width &rArr; get_vec_font_width &rArr; get_font &rArr; Draw_hz &rArr; getBhDetailData &rArr; bending &rArr; BSpline
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_one_char_code_len_get
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_get_one_word_width
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_single_line
</UL>

<P><STRONG><a name="[287]"></a>draw_text_multiple_line</STRONG> (Thumb, 2218 bytes, Stack size 288 bytes, gt_draw.o(i.draw_text_multiple_line), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_realloc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;right_to_left_lan_get
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_symbol_is_valid_range
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_symbol_get_mask_buf
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_right_to_left_handler
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_split
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_one_char_code_len_get
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_get_size_length_by_style
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_get_one_word_width
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_get_dot
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_draw_blend_text
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_draw_blend
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_is_style_cn_or_en
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_font_is_convertor_language
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_font_get_type_group_offset_y
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_color_black
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gray_and_dot_byte_get
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_style_space_y
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_align_start_y
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_align_start_x
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_text_convertor_split
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_blend_underline
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_blend_strikethrough
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[286]"></a>draw_text_single_line</STRONG> (Thumb, 2038 bytes, Stack size 264 bytes, gt_draw.o(i.draw_text_single_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 1692<LI>Call Chain = draw_text_single_line &rArr; _draw_text_convertor_split &rArr; gt_font_get_one_word_width &rArr; GT_Get_Font_Width &rArr; get_vec_font_width &rArr; get_font &rArr; Draw_hz &rArr; getBhDetailData &rArr; bending &rArr; BSpline
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_realloc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;right_to_left_lan_get
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_symbol_is_valid_range
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_symbol_get_mask_buf
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_right_to_left_handler
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_split
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_one_char_code_len_get
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_get_size_length_by_style
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_get_one_word_width
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_get_dot
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_draw_blend_text
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_draw_blend
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_is_style_cn_or_en
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_font_is_convertor_language
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_font_get_type_group_offset_y
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_color_black
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_omit_get_font_width
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gray_and_dot_byte_get
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_style_space_y
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_align_start_y_by_line
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_align_start_x
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_text_convertor_split
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_blend_underline
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_blend_strikethrough
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text
</UL>

<P><STRONG><a name="[28b]"></a>gt_color_black</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gt_draw.o(i.gt_color_black))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_color_black
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_single_line
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text_multiple_line
</UL>

<P><STRONG><a name="[198]"></a>_gt_event_calling_event_cb</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, gt_event.o(i._gt_event_calling_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _gt_event_calling_event_cb &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_event_send_kernel
</UL>

<P><STRONG><a name="[199]"></a>_gt_event_send_kernel</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, gt_event.o(i._gt_event_send_kernel))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = _gt_event_send_kernel &rArr;  _gt_event_send_kernel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_bubble_notify
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_parent
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_event_send_kernel
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_event_calling_event_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_event_send_kernel
</UL>

<P><STRONG><a name="[2ad]"></a>gt_color_black</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gt_graph_base.o(i.gt_color_black))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gt_color_black &rArr; gt_color_make
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_graph_init_rect_attr
</UL>

<P><STRONG><a name="[2ae]"></a>gt_color_make</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gt_graph_base.o(i.gt_color_make))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_color_black
</UL>

<P><STRONG><a name="[7d]"></a>_gt_img_decoder_built_in_close</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gt_img_decoder.o(i._gt_img_decoder_built_in_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _gt_img_decoder_built_in_close &rArr; gt_fs_close &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_img_decoder.o(i._gt_img_decoder_init)
</UL>
<P><STRONG><a name="[7a]"></a>_gt_img_decoder_built_in_info</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gt_img_decoder.o(i._gt_img_decoder_built_in_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _gt_img_decoder_built_in_info &rArr; gt_fs_close &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_open
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_img_decoder.o(i._gt_img_decoder_init)
</UL>
<P><STRONG><a name="[7b]"></a>_gt_img_decoder_built_in_open</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gt_img_decoder.o(i._gt_img_decoder_built_in_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _gt_img_decoder_built_in_open &rArr; gt_fs_open &rArr; gt_fs_get_src_type
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_img_decoder.o(i._gt_img_decoder_init)
</UL>
<P><STRONG><a name="[7c]"></a>_gt_img_decoder_built_in_read_line</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, gt_img_decoder.o(i._gt_img_decoder_built_in_read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _gt_img_decoder_built_in_read_line &rArr; gt_fs_read
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_seek
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_img_decoder.o(i._gt_img_decoder_init)
</UL>
<P><STRONG><a name="[1de]"></a>_absorb_handler</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, gt_indev.o(i._absorb_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _absorb_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_scroll_throw_handler
</UL>

<P><STRONG><a name="[176]"></a>_get_scroll_dir</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, gt_indev.o(i._get_scroll_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_scroll_dir
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_indev_home_gesture
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_scroll_throw_handler
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_scroll_handler
</UL>

<P><STRONG><a name="[1ac]"></a>_gt_indev_handler_button</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, gt_indev.o(i._gt_indev_handler_button))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _gt_indev_handler_button
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_handler
</UL>

<P><STRONG><a name="[1ad]"></a>_gt_indev_handler_keypad</STRONG> (Thumb, 278 bytes, Stack size 48 bytes, gt_indev.o(i._gt_indev_handler_keypad))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _gt_indev_handler_keypad &rArr; gt_obj_prev_focus_change &rArr; gt_obj_set_focus &rArr; gt_event_send &rArr; _gt_event_send_kernel &rArr;  _gt_event_send_kernel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_scr
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_prev_focus_change
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_next_focus_change
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_untouchability
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_find_clicked_obj_by_focus
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_handler
</UL>

<P><STRONG><a name="[1b3]"></a>_gt_indev_handler_point</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, gt_indev.o(i._gt_indev_handler_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _gt_indev_handler_point &rArr; _indev_pressed_handle &rArr; _indev_scroll_handler &rArr; gt_obj_scroll_to &rArr; gt_anim_start &rArr; _gt_anim_free_task &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_released_handle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_pressed_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_handler
</UL>

<P><STRONG><a name="[1b4]"></a>_indev_pressed_handle</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, gt_indev.o(i._indev_pressed_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _indev_pressed_handle &rArr; _indev_scroll_handler &rArr; gt_obj_scroll_to &rArr; gt_anim_start &rArr; _gt_anim_free_task &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tick_get
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_untouchability
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_click_point_by_phy_point
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_set_process_point
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_search_active_obj_from_all_layers
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_scroll_handler
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_indev_handler_point
</UL>

<P><STRONG><a name="[1b5]"></a>_indev_released_handle</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, gt_indev.o(i._indev_released_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _indev_released_handle &rArr; _indev_scroll_throw_handler_anim_start &rArr; gt_anim_start &rArr; _gt_anim_free_task &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_untouchability
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_scroll_throw_handler_anim_start
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_indev_handler_point
</UL>

<P><STRONG><a name="[1d4]"></a>_indev_scroll_handler</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, gt_indev.o(i._indev_scroll_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _indev_scroll_handler &rArr; gt_obj_scroll_to &rArr; gt_anim_start &rArr; _gt_anim_free_task &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_scroll_ud
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_scroll_lr
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_scroll_to
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_scroll_vertical
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_indev_home_gesture
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_scroll_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_pressed_handle
</UL>

<P><STRONG><a name="[7f]"></a>_indev_scroll_throw_exec_cb</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gt_indev.o(i._indev_scroll_throw_exec_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _indev_scroll_throw_exec_cb &rArr; _indev_scroll_throw_handler &rArr; gt_obj_scroll_to &rArr; gt_anim_start &rArr; _gt_anim_free_task &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_scroll_throw_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_indev.o(i._indev_scroll_throw_handler_anim_start)
</UL>
<P><STRONG><a name="[1db]"></a>_indev_scroll_throw_handler</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, gt_indev.o(i._indev_scroll_throw_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _indev_scroll_throw_handler &rArr; gt_obj_scroll_to &rArr; gt_anim_start &rArr; _gt_anim_free_task &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_scroll_to
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_scroll_snap_y
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_scroll_snap_x
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scroll_predict
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_scroll_vertical
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_scroll_dir
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_absorb_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_scroll_throw_exec_cb
</UL>

<P><STRONG><a name="[1d5]"></a>_indev_scroll_throw_handler_anim_start</STRONG> (Thumb, 112 bytes, Stack size 104 bytes, gt_indev.o(i._indev_scroll_throw_handler_anim_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _indev_scroll_throw_handler_anim_start &rArr; gt_anim_start &rArr; _gt_anim_free_task &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_start
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_scr
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tick_get
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_indev_home_gesture
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_released_handle
</UL>

<P><STRONG><a name="[80]"></a>_indev_scroll_throw_ready_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gt_indev.o(i._indev_scroll_throw_ready_cb))
<BR>[Address Reference Count : 1]<UL><LI> gt_indev.o(i._indev_scroll_throw_handler_anim_start)
</UL>
<P><STRONG><a name="[1d6]"></a>_is_indev_home_gesture</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, gt_indev.o(i._is_indev_home_gesture))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _is_indev_home_gesture &rArr; _get_scroll_dir
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_scroll_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_scroll_throw_handler_anim_start
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_scroll_handler
</UL>

<P><STRONG><a name="[1d7]"></a>_is_scroll_vertical</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gt_indev.o(i._is_scroll_vertical))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_scroll_throw_handler
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_scroll_handler
</UL>

<P><STRONG><a name="[1dd]"></a>_scroll_predict</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, gt_indev.o(i._scroll_predict))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _scroll_predict &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_scroll_throw_handler
</UL>

<P><STRONG><a name="[1d1]"></a>_search_active_obj_from_all_layers</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, gt_indev.o(i._search_active_obj_from_all_layers))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _search_active_obj_from_all_layers &rArr; _gt_disp_hided_layer_top_widgets &rArr; gt_event_send &rArr; _gt_event_send_kernel &rArr;  _gt_event_send_kernel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_scr
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_layer_top
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_find_clicked_obj_by_point
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_dialog_has_showing
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_hided_layer_top_widgets
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_pressed_handle
</UL>

<P><STRONG><a name="[1c3]"></a>_gt_obj_foreach_clicked</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, gt_obj_pos.o(i._gt_obj_foreach_clicked))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + In Cycle
<LI>Call Chain = _gt_obj_foreach_clicked &rArr;  _gt_obj_foreach_clicked (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_visible
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_virtual
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_touch_parent
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_foreach_clicked
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_foreach_clicked
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_find_clicked_obj_by_point
</UL>

<P><STRONG><a name="[1c6]"></a>_gt_obj_next_focus_get</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, gt_obj_pos.o(i._gt_obj_next_focus_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + In Cycle
<LI>Call Chain = _gt_obj_next_focus_get &rArr;  _gt_obj_next_focus_get (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_next_focus_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_next_focus_get
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_next_focus_change
</UL>

<P><STRONG><a name="[1c7]"></a>_gt_obj_prev_focus_get</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, gt_obj_pos.o(i._gt_obj_prev_focus_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = _gt_obj_prev_focus_get &rArr;  _gt_obj_prev_focus_get (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_prev_focus_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_prev_focus_get
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_prev_focus_change
</UL>

<P><STRONG><a name="[91]"></a>_scroll_by_x</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gt_obj_scroll.o(i._scroll_by_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _scroll_by_x &rArr; gt_event_send &rArr; _gt_event_send_kernel &rArr;  _gt_event_send_kernel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_set_process_scroll_xy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_obj_scroll.o(i.gt_obj_scroll_to)
</UL>
<P><STRONG><a name="[92]"></a>_scroll_by_y</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gt_obj_scroll.o(i._scroll_by_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _scroll_by_y &rArr; gt_event_send &rArr; _gt_event_send_kernel &rArr;  _gt_event_send_kernel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_set_process_scroll_xy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_obj_scroll.o(i.gt_obj_scroll_to)
</UL>
<P><STRONG><a name="[209]"></a>_update_layer_top_widget_area</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, gt_style.o(i._update_layer_top_widget_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _update_layer_top_widget_area &rArr; gt_event_send &rArr; _gt_event_send_kernel &rArr;  _gt_event_send_kernel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_y
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_x
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_default
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_update_max_area
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_pos_change
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_move_child_by
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_is_ignore_calc_max_area
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_y
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_x
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_pos
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_area
</UL>

<P><STRONG><a name="[1d0]"></a>_gt_timer_remove_task</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gt_timer.o(i._gt_timer_remove_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _gt_timer_remove_task &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_handler
</UL>

<P><STRONG><a name="[1f5]"></a>_row_grow_inside</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, gt_layout.o(i._row_grow_inside))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + In Cycle
<LI>Call Chain = _row_grow_inside &rArr;  _row_grow_inside (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_y
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_visible
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_virtual
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_row_grow_inside
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_pos
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_w
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_h
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_row_grow_inside
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_layout_row_grow
</UL>

<P><STRONG><a name="[1fa]"></a>_row_grow_inside_invert</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, gt_layout.o(i._row_grow_inside_invert))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + In Cycle
<LI>Call Chain = _row_grow_inside_invert &rArr;  _row_grow_inside_invert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_y
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_visible
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_virtual
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_row_grow_inside_invert
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_pos
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_w
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_h
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_row_grow_inside_invert
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_layout_row_grow
</UL>

<P><STRONG><a name="[135]"></a>_common_sjpg_info</STRONG> (Thumb, 260 bytes, Stack size 200 bytes, gt_sjpg.o(i._common_sjpg_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _common_sjpg_info &rArr; jd_prepare &rArr; create_huffman_tbl
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_seek
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_read
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memcmp
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_jpg
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_info
</UL>

<P><STRONG><a name="[139]"></a>_common_sjpg_open</STRONG> (Thumb, 490 bytes, Stack size 208 bytes, gt_sjpg.o(i._common_sjpg_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _common_sjpg_open &rArr; jd_prepare &rArr; create_huffman_tbl
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_seek
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_read
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_close
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memcmp
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sjpg_free
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_sjpg_st
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_jpg
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_open
</UL>

<P><STRONG><a name="[a1]"></a>_gt_sjpg_close</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gt_sjpg.o(i._gt_sjpg_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _gt_sjpg_close &rArr; _sjpg_free &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_close
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sjpg_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_sjpg.o(i.gt_sjpg_init)
</UL>
<P><STRONG><a name="[9e]"></a>_gt_sjpg_info</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, gt_sjpg.o(i._gt_sjpg_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _gt_sjpg_info &rArr; _common_sjpg_info &rArr; jd_prepare &rArr; create_huffman_tbl
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_open
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_get_ext
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_close
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memcmp
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_common_sjpg_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_sjpg.o(i.gt_sjpg_init)
</UL>
<P><STRONG><a name="[9f]"></a>_gt_sjpg_open</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gt_sjpg.o(i._gt_sjpg_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _gt_sjpg_open &rArr; _common_sjpg_open &rArr; jd_prepare &rArr; create_huffman_tbl
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_open
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_common_sjpg_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_sjpg.o(i.gt_sjpg_init)
</UL>
<P><STRONG><a name="[a0]"></a>_gt_sjpg_read_line</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, gt_sjpg.o(i._gt_sjpg_read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = _gt_sjpg_read_line &rArr; jd_decomp &rArr; mcu_load &rArr; block_idct
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memcpy
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_seek
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_decomp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_sjpg.o(i.gt_sjpg_init)
</UL>
<P><STRONG><a name="[137]"></a>_is_jpg</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gt_sjpg.o(i._is_jpg))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _is_jpg &rArr; gt_memcmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_common_sjpg_open
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_common_sjpg_info
</UL>

<P><STRONG><a name="[13a]"></a>_malloc_sjpg_st</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gt_sjpg.o(i._malloc_sjpg_st))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _malloc_sjpg_st &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_common_sjpg_open
</UL>

<P><STRONG><a name="[13b]"></a>_sjpg_free</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gt_sjpg.o(i._sjpg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _sjpg_free &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_close
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_common_sjpg_open
</UL>

<P><STRONG><a name="[78]"></a>input_func</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gt_sjpg.o(i.input_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = input_func &rArr; gt_fs_read
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_seek
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_read
</UL>
<BR>[Address Reference Count : 3]<UL><LI> gt_sjpg.o(i._common_sjpg_info)
<LI> gt_sjpg.o(i._common_sjpg_open)
<LI> gt_sjpg.o(i._gt_sjpg_read_line)
</UL>
<P><STRONG><a name="[7e]"></a>output_func</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, gt_sjpg.o(i.output_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = output_func &rArr; gt_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_sjpg.o(i._gt_sjpg_read_line)
</UL>
<P><STRONG><a name="[24f]"></a>alloc_pool</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tjpgd.o(i.alloc_pool))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_huffman_tbl
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
</UL>

<P><STRONG><a name="[351]"></a>bitext</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, tjpgd.o(i.bitext))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bitext
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load
</UL>

<P><STRONG><a name="[352]"></a>block_idct</STRONG> (Thumb, 430 bytes, Stack size 36 bytes, tjpgd.o(i.block_idct))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = block_idct
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load
</UL>

<P><STRONG><a name="[24e]"></a>create_huffman_tbl</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, tjpgd.o(i.create_huffman_tbl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = create_huffman_tbl
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
</UL>

<P><STRONG><a name="[350]"></a>huffext</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, tjpgd.o(i.huffext))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = huffext
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load
</UL>

<P><STRONG><a name="[324]"></a>mcu_load</STRONG> (Thumb, 346 bytes, Stack size 48 bytes, tjpgd.o(i.mcu_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mcu_load &rArr; block_idct
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huffext
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_idct
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitext
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_decomp
</UL>

<P><STRONG><a name="[325]"></a>mcu_output</STRONG> (Thumb, 782 bytes, Stack size 80 bytes, tjpgd.o(i.mcu_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mcu_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_decomp
</UL>

<P><STRONG><a name="[323]"></a>restart</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, tjpgd.o(i.restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = restart
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_decomp
</UL>

<P><STRONG><a name="[173]"></a>_get_cover_dst_area_and_offset_by</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, gt_draw_blend.o(i._get_cover_dst_area_and_offset_by))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _get_cover_dst_area_and_offset_by &rArr; gt_area_cover_screen &rArr; _gt_area_is_outside_area
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_cover_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_draw_blend_text
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_draw_blend
</UL>

<P><STRONG><a name="[2c5]"></a>gt_color_mix</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, gt_draw_blend.o(i.gt_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gt_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_draw_blend_text
</UL>

<P><STRONG><a name="[114]"></a>_blend_rgb565_with_no_opacity</STRONG> (Thumb, 552 bytes, Stack size 120 bytes, gt_draw_blend_with_rgb565.o(i._blend_rgb565_with_no_opacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = _blend_rgb565_with_no_opacity &rArr; gt_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_draw_blend_with_rgb565_no_opacity
</UL>

<P><STRONG><a name="[116]"></a>_blend_rgb565_with_opacity</STRONG> (Thumb, 898 bytes, Stack size 56 bytes, gt_draw_blend_with_rgb565.o(i._blend_rgb565_with_opacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _blend_rgb565_with_opacity &rArr; gt_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_color_mix
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_per_255
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_draw_blend_with_rgb565_opacity
</UL>

<P><STRONG><a name="[115]"></a>gt_color_mix</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, gt_draw_blend_with_rgb565.o(i.gt_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gt_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_blend_rgb565_with_opacity
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_blend_rgb565_with_no_opacity
</UL>

<P><STRONG><a name="[12b]"></a>_common_png_info</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, gt_png.o(i._common_png_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _common_png_info &rArr; _is_png_file_type &rArr; gt_fs_read
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_seek
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_read
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_close
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset_0
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_png_file_type
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_32bit_int
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_png_info
</UL>

<P><STRONG><a name="[132]"></a>_common_png_open</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, gt_png.o(i._common_png_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1076<LI>Call Chain = _common_png_open &rArr; lodepng_decode32 &rArr; lodepng_decode_memory &rArr; lodepng_decode &rArr; decodeGeneric &rArr; postProcessScanlines &rArr; Adam7_deinterlace &rArr; Adam7_getpassvalues
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_error_text
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode32
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_png_open
</UL>

<P><STRONG><a name="[130]"></a>_get_32bit_int</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gt_png.o(i._get_32bit_int))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_common_png_info
</UL>

<P><STRONG><a name="[97]"></a>_gt_png_close</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gt_png.o(i._gt_png_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _gt_png_close &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_close
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_png.o(i.gt_png_init)
</UL>
<P><STRONG><a name="[94]"></a>_gt_png_info</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gt_png.o(i._gt_png_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _gt_png_info &rArr; _common_png_info &rArr; _is_png_file_type &rArr; gt_fs_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_open
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_png_file_ext
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_common_png_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_png.o(i.gt_png_init)
</UL>
<P><STRONG><a name="[95]"></a>_gt_png_open</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, gt_png.o(i._gt_png_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1100<LI>Call Chain = _gt_png_open &rArr; _common_png_open &rArr; lodepng_decode32 &rArr; lodepng_decode_memory &rArr; lodepng_decode &rArr; decodeGeneric &rArr; postProcessScanlines &rArr; Adam7_deinterlace &rArr; Adam7_getpassvalues
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_open
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_close
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_load_file
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_png_file_type
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_png_file_ext
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_common_png_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_png.o(i.gt_png_init)
</UL>
<P><STRONG><a name="[96]"></a>_gt_png_read_line</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gt_png.o(i._gt_png_read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gt_png_read_line &rArr; gt_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_png.o(i.gt_png_init)
</UL>
<P><STRONG><a name="[1c8]"></a>_is_png_file_ext</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gt_png.o(i._is_png_file_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _is_png_file_ext &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_png_open
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_png_info
</UL>

<P><STRONG><a name="[12c]"></a>_is_png_file_type</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, gt_png.o(i._is_png_file_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _is_png_file_type &rArr; gt_fs_read
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_seek
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_read
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_png_open
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_common_png_info
</UL>

<P><STRONG><a name="[f6]"></a>Adam7_deinterlace</STRONG> (Thumb, 328 bytes, Stack size 224 bytes, lodepng.o(i.Adam7_deinterlace))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = Adam7_deinterlace &rArr; Adam7_getpassvalues
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBitOfReversedStream
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBitFromReversedStream
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adam7_getpassvalues
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postProcessScanlines
</UL>

<P><STRONG><a name="[f7]"></a>Adam7_getpassvalues</STRONG> (Thumb, 264 bytes, Stack size 36 bytes, lodepng.o(i.Adam7_getpassvalues))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Adam7_getpassvalues
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postProcessScanlines
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adam7_deinterlace
</UL>

<P><STRONG><a name="[fa]"></a>HuffmanTree_cleanup</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lodepng.o(i.HuffmanTree_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HuffmanTree_cleanup &rArr; lodepng_free &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic
</UL>

<P><STRONG><a name="[2a4]"></a>HuffmanTree_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lodepng.o(i.HuffmanTree_init))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic
</UL>

<P><STRONG><a name="[fc]"></a>HuffmanTree_makeFromLengths</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lodepng.o(i.HuffmanTree_makeFromLengths))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HuffmanTree_makeFromLengths &rArr; lodepng_malloc &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateFixed
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic
</UL>

<P><STRONG><a name="[fe]"></a>HuffmanTree_makeFromLengths2</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, lodepng.o(i.HuffmanTree_makeFromLengths2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeTable
</UL>

<P><STRONG><a name="[ff]"></a>HuffmanTree_makeTable</STRONG> (Thumb, 472 bytes, Stack size 40 bytes, lodepng.o(i.HuffmanTree_makeTable), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverseBits
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_memset
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths2
</UL>

<P><STRONG><a name="[102]"></a>LodePNGIText_cleanup</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lodepng.o(i.LodePNGIText_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LodePNGIText_cleanup &rArr; string_cleanup &rArr; lodepng_free &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_cleanup
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_cleanup
</UL>

<P><STRONG><a name="[104]"></a>LodePNGText_cleanup</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lodepng.o(i.LodePNGText_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LodePNGText_cleanup &rArr; string_cleanup &rArr; lodepng_free &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_cleanup
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_cleanup
</UL>

<P><STRONG><a name="[105]"></a>LodePNGUnknownChunks_cleanup</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lodepng.o(i.LodePNGUnknownChunks_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LodePNGUnknownChunks_cleanup &rArr; lodepng_free &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_cleanup
</UL>

<P><STRONG><a name="[34a]"></a>LodePNGUnknownChunks_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lodepng.o(i.LodePNGUnknownChunks_init))
<BR><BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_init
</UL>

<P><STRONG><a name="[36d]"></a>addColorBits</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lodepng.o(i.addColorBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = addColorBits
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgba8ToPixel
</UL>

<P><STRONG><a name="[31d]"></a>advanceBits</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lodepng.o(i.advanceBits))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBits
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huffmanDecodeSymbol
</UL>

<P><STRONG><a name="[213]"></a>alloc_string</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lodepng.o(i.alloc_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = alloc_string
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_text_sized
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_itext_sized
</UL>

<P><STRONG><a name="[215]"></a>alloc_string_sized</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lodepng.o(i.alloc_string_sized))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = alloc_string_sized &rArr; lodepng_malloc &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_memcpy
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_text_sized
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_itext_sized
</UL>

<P><STRONG><a name="[239]"></a>color_tree_cleanup</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lodepng.o(i.color_tree_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = color_tree_cleanup &rArr;  color_tree_cleanup (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_cleanup
</UL>

<P><STRONG><a name="[23a]"></a>color_tree_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lodepng.o(i.color_tree_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = color_tree_init
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
</UL>

<P><STRONG><a name="[25b]"></a>decodeGeneric</STRONG> (Thumb, 1024 bytes, Stack size 88 bytes, lodepng.o(i.decodeGeneric))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = decodeGeneric &rArr; postProcessScanlines &rArr; Adam7_deinterlace &rArr; Adam7_getpassvalues
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inspect
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_raw_size
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_bpp
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_type_equals
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_next_const
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_length
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_check_crc
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_append
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zlib_decompress
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_zTXt
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_tRNS
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_tIME
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_tEXt
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_sRGB
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_sBIT
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_pHYs
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iCCP
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_gAMA
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_cHRM
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_bKGD
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_PLTE
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postProcessScanlines
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_pixel_overflow
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_memset
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_memcpy
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_raw_size_idat
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_addofl
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
</UL>

<P><STRONG><a name="[2a6]"></a>ensureBits25</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lodepng.o(i.ensureBits25))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ensureBits25
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic
</UL>

<P><STRONG><a name="[320]"></a>ensureBits32</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, lodepng.o(i.ensureBits32))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ensureBits32
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock
</UL>

<P><STRONG><a name="[2a5]"></a>ensureBits9</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lodepng.o(i.ensureBits9))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ensureBits9
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inflatev
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic
</UL>

<P><STRONG><a name="[344]"></a>getNumColorChannels</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lodepng.o(i.getNumColorChannels))
<BR><BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_bpp_lct
</UL>

<P><STRONG><a name="[33c]"></a>getPixelColorRGBA16</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, lodepng.o(i.getPixelColorRGBA16))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getPixelColorRGBA16
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
</UL>

<P><STRONG><a name="[29e]"></a>getPixelColorRGBA8</STRONG> (Thumb, 464 bytes, Stack size 40 bytes, lodepng.o(i.getPixelColorRGBA8))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = getPixelColorRGBA8 &rArr; readBitsFromReversedStream
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBitsFromReversedStream
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
</UL>

<P><STRONG><a name="[2a0]"></a>getPixelColorsRGB8</STRONG> (Thumb, 418 bytes, Stack size 32 bytes, lodepng.o(i.getPixelColorsRGB8))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = getPixelColorsRGB8 &rArr; readBitsFromReversedStream
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBitsFromReversedStream
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
</UL>

<P><STRONG><a name="[2a1]"></a>getPixelColorsRGBA8</STRONG> (Thumb, 650 bytes, Stack size 40 bytes, lodepng.o(i.getPixelColorsRGBA8))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = getPixelColorsRGBA8 &rArr; readBitsFromReversedStream
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBitsFromReversedStream
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
</UL>

<P><STRONG><a name="[2a2]"></a>getTreeInflateDynamic</STRONG> (Thumb, 664 bytes, Stack size 80 bytes, lodepng.o(i.getTreeInflateDynamic))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = getTreeInflateDynamic &rArr; HuffmanTree_makeFromLengths &rArr; lodepng_malloc &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBits
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_memset
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_addofl
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huffmanDecodeSymbol
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensureBits9
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensureBits25
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock
</UL>

<P><STRONG><a name="[2a8]"></a>getTreeInflateFixed</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, lodepng.o(i.getTreeInflateFixed))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = getTreeInflateFixed &rArr; HuffmanTree_makeFromLengths &rArr; lodepng_malloc &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock
</UL>

<P><STRONG><a name="[2a7]"></a>huffmanDecodeSymbol</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lodepng.o(i.huffmanDecodeSymbol))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = huffmanDecodeSymbol
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advanceBits
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic
</UL>

<P><STRONG><a name="[31e]"></a>inflateHuffmanBlock</STRONG> (Thumb, 406 bytes, Stack size 104 bytes, lodepng.o(i.inflateHuffmanBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = inflateHuffmanBlock &rArr; getTreeInflateDynamic &rArr; HuffmanTree_makeFromLengths &rArr; lodepng_malloc &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_reserve
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBits
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_memcpy
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huffmanDecodeSymbol
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateFixed
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensureBits32
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensureBits25
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inflatev
</UL>

<P><STRONG><a name="[321]"></a>inflateNoCompression</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, lodepng.o(i.inflateNoCompression))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = inflateNoCompression &rArr; ucvector_resize &rArr; ucvector_reserve &rArr; lodepng_realloc &rArr; _mem_realloc &rArr; gt_tlsf_realloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_resize
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inflatev
</UL>

<P><STRONG><a name="[330]"></a>lodepng_add_itext_sized</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, lodepng.o(i.lodepng_add_itext_sized))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lodepng_add_itext_sized &rArr; lodepng_realloc &rArr; _mem_realloc &rArr; gt_tlsf_realloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_realloc
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_string_sized
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_string
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt
</UL>

<P><STRONG><a name="[333]"></a>lodepng_add_text_sized</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, lodepng.o(i.lodepng_add_text_sized))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lodepng_add_text_sized &rArr; lodepng_realloc &rArr; _mem_realloc &rArr; gt_tlsf_realloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_realloc
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_string_sized
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_string
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_zTXt
</UL>

<P><STRONG><a name="[260]"></a>lodepng_addofl</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lodepng.o(i.lodepng_addofl))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_next_const
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_append
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_pixel_overflow
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inflatev
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[337]"></a>lodepng_color_mode_alloc_palette</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lodepng.o(i.lodepng_color_mode_alloc_palette))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lodepng_color_mode_alloc_palette &rArr; lodepng_malloc &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_PLTE
</UL>

<P><STRONG><a name="[33b]"></a>lodepng_color_mode_equal</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, lodepng.o(i.lodepng_color_mode_equal))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lodepng_color_mode_equal
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
</UL>

<P><STRONG><a name="[fb]"></a>lodepng_free</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lodepng.o(i.lodepng_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lodepng_free &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_palette_clear
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_clear_icc
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_cleanup
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_zTXt
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_tEXt
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateFixed
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_cleanup
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGUnknownChunks_cleanup
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGText_cleanup
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGIText_cleanup
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeTable
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths2
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_cleanup
</UL>

<P><STRONG><a name="[343]"></a>lodepng_get_bpp_lct</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lodepng.o(i.lodepng_get_bpp_lct))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lodepng_get_bpp_lct
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNumColorChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_raw_size
</UL>

<P><STRONG><a name="[272]"></a>lodepng_get_raw_size_idat</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lodepng.o(i.lodepng_get_raw_size_idat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lodepng_get_raw_size_idat
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unfilter
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[345]"></a>lodepng_inflatev</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, lodepng.o(i.lodepng_inflatev))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lodepng_inflatev &rArr; inflateHuffmanBlock &rArr; getTreeInflateDynamic &rArr; HuffmanTree_makeFromLengths &rArr; lodepng_malloc &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBits
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_mulofl
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_addofl
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateNoCompression
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensureBits9
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_zlib_decompressv
</UL>

<P><STRONG><a name="[fd]"></a>lodepng_malloc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lodepng.o(i.lodepng_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lodepng_malloc &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_load_file
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_copy
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_zTXt
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_tEXt
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iCCP
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_alloc_palette
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateFixed
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_string_sized
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeTable
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths2
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths
</UL>

<P><STRONG><a name="[216]"></a>lodepng_memcpy</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lodepng.o(i.lodepng_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lodepng_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_copy
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_zTXt
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_tEXt
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateNoCompression
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPixelColorsRGBA8
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPixelColorsRGB8
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_string_sized
</UL>

<P><STRONG><a name="[100]"></a>lodepng_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lodepng.o(i.lodepng_memset))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeTable
</UL>

<P><STRONG><a name="[346]"></a>lodepng_mulofl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lodepng.o(i.lodepng_mulofl))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_pixel_overflow
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inflatev
</UL>

<P><STRONG><a name="[25d]"></a>lodepng_pixel_overflow</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, lodepng.o(i.lodepng_pixel_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lodepng_pixel_overflow
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_bpp
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_mulofl
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_addofl
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[334]"></a>lodepng_read32bitInt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lodepng.o(i.lodepng_read32bitInt))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inspect
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_length
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_check_crc
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_zlib_decompressv
</UL>

<P><STRONG><a name="[331]"></a>lodepng_realloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lodepng.o(i.lodepng_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lodepng_realloc &rArr; _mem_realloc &rArr; gt_tlsf_realloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_realloc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_append
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_reserve
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_text_sized
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_itext_sized
</UL>

<P><STRONG><a name="[214]"></a>lodepng_strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lodepng.o(i.lodepng_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_type_equals
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_text
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_string
</UL>

<P><STRONG><a name="[34d]"></a>lodepng_zlib_decompressv</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, lodepng.o(i.lodepng_zlib_decompressv))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = lodepng_zlib_decompressv &rArr; lodepng_inflatev &rArr; inflateHuffmanBlock &rArr; getTreeInflateDynamic &rArr; HuffmanTree_makeFromLengths &rArr; lodepng_malloc &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_read32bitInt
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inflatev
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zlib_decompress
</UL>

<P><STRONG><a name="[3b3]"></a>paethPredictor</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lodepng.o(i.paethPredictor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = paethPredictor
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unfilterScanline
</UL>

<P><STRONG><a name="[275]"></a>postProcessScanlines</STRONG> (Thumb, 246 bytes, Stack size 224 bytes, lodepng.o(i.postProcessScanlines))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = postProcessScanlines &rArr; Adam7_deinterlace &rArr; Adam7_getpassvalues
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_bpp
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unfilter
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removePaddingBits
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adam7_getpassvalues
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adam7_deinterlace
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[f8]"></a>readBitFromReversedStream</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lodepng.o(i.readBitFromReversedStream))
<BR><BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removePaddingBits
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBitsFromReversedStream
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adam7_deinterlace
</UL>

<P><STRONG><a name="[2a3]"></a>readBits</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lodepng.o(i.readBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = readBits
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advanceBits
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inflatev
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic
</UL>

<P><STRONG><a name="[29f]"></a>readBitsFromReversedStream</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lodepng.o(i.readBitsFromReversedStream))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = readBitsFromReversedStream
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBitFromReversedStream
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPixelColorsRGBA8
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPixelColorsRGB8
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPixelColorRGBA8
</UL>

<P><STRONG><a name="[261]"></a>readChunk_PLTE</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, lodepng.o(i.readChunk_PLTE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = readChunk_PLTE &rArr; lodepng_color_mode_alloc_palette &rArr; lodepng_malloc &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_alloc_palette
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[263]"></a>readChunk_bKGD</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, lodepng.o(i.readChunk_bKGD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = readChunk_bKGD
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[26a]"></a>readChunk_cHRM</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, lodepng.o(i.readChunk_cHRM))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = readChunk_cHRM
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[269]"></a>readChunk_gAMA</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lodepng.o(i.readChunk_gAMA))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[26c]"></a>readChunk_iCCP</STRONG> (Thumb, 200 bytes, Stack size 64 bytes, lodepng.o(i.readChunk_iCCP))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = readChunk_iCCP &rArr; zlib_decompress &rArr; lodepng_zlib_decompressv &rArr; lodepng_inflatev &rArr; inflateHuffmanBlock &rArr; getTreeInflateDynamic &rArr; HuffmanTree_makeFromLengths &rArr; lodepng_malloc &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_clear_icc
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zlib_decompress
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[266]"></a>readChunk_iTXt</STRONG> (Thumb, 354 bytes, Stack size 96 bytes, lodepng.o(i.readChunk_iTXt))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = readChunk_iTXt &rArr; zlib_decompress &rArr; lodepng_zlib_decompressv &rArr; lodepng_inflatev &rArr; inflateHuffmanBlock &rArr; getTreeInflateDynamic &rArr; HuffmanTree_makeFromLengths &rArr; lodepng_malloc &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zlib_decompress
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_memcpy
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_itext_sized
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[268]"></a>readChunk_pHYs</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lodepng.o(i.readChunk_pHYs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = readChunk_pHYs
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[26d]"></a>readChunk_sBIT</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, lodepng.o(i.readChunk_sBIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = readChunk_sBIT
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[26b]"></a>readChunk_sRGB</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lodepng.o(i.readChunk_sRGB))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[264]"></a>readChunk_tEXt</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, lodepng.o(i.readChunk_tEXt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = readChunk_tEXt &rArr; lodepng_malloc &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_text
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_memcpy
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[267]"></a>readChunk_tIME</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lodepng.o(i.readChunk_tIME))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[262]"></a>readChunk_tRNS</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, lodepng.o(i.readChunk_tRNS))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = readChunk_tRNS
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[265]"></a>readChunk_zTXt</STRONG> (Thumb, 180 bytes, Stack size 72 bytes, lodepng.o(i.readChunk_zTXt))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = readChunk_zTXt &rArr; zlib_decompress &rArr; lodepng_zlib_decompressv &rArr; lodepng_inflatev &rArr; inflateHuffmanBlock &rArr; getTreeInflateDynamic &rArr; HuffmanTree_makeFromLengths &rArr; lodepng_malloc &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zlib_decompress
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_memcpy
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_text_sized
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[357]"></a>removePaddingBits</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, lodepng.o(i.removePaddingBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = removePaddingBits &rArr; setBitOfReversedStream
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBitOfReversedStream
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBitFromReversedStream
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postProcessScanlines
</UL>

<P><STRONG><a name="[101]"></a>reverseBits</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lodepng.o(i.reverseBits), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeTable
</UL>

<P><STRONG><a name="[33d]"></a>rgba16ToPixel</STRONG> (Thumb, 138 bytes, Stack size 28 bytes, lodepng.o(i.rgba16ToPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rgba16ToPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
</UL>

<P><STRONG><a name="[33e]"></a>rgba8ToPixel</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, lodepng.o(i.rgba8ToPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rgba8ToPixel &rArr; addColorBits
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addColorBits
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
</UL>

<P><STRONG><a name="[f9]"></a>setBitOfReversedStream</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, lodepng.o(i.setBitOfReversedStream))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = setBitOfReversedStream
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removePaddingBits
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adam7_deinterlace
</UL>

<P><STRONG><a name="[103]"></a>string_cleanup</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lodepng.o(i.string_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = string_cleanup &rArr; lodepng_free &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_clear_icc
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGText_cleanup
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGIText_cleanup
</UL>

<P><STRONG><a name="[31f]"></a>ucvector_reserve</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lodepng.o(i.ucvector_reserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ucvector_reserve &rArr; lodepng_realloc &rArr; _mem_realloc &rArr; gt_tlsf_realloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_resize
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock
</UL>

<P><STRONG><a name="[322]"></a>ucvector_resize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lodepng.o(i.ucvector_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ucvector_resize &rArr; ucvector_reserve &rArr; lodepng_realloc &rArr; _mem_realloc &rArr; gt_tlsf_realloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_reserve
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zlib_decompress
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateNoCompression
</UL>

<P><STRONG><a name="[356]"></a>unfilter</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, lodepng.o(i.unfilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = unfilter &rArr; unfilterScanline &rArr; paethPredictor
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unfilterScanline
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_raw_size_idat
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postProcessScanlines
</UL>

<P><STRONG><a name="[3b2]"></a>unfilterScanline</STRONG> (Thumb, 1004 bytes, Stack size 88 bytes, lodepng.o(i.unfilterScanline))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = unfilterScanline &rArr; paethPredictor
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paethPredictor
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unfilter
</UL>

<P><STRONG><a name="[273]"></a>zlib_decompress</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, lodepng.o(i.zlib_decompress))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = zlib_decompress &rArr; lodepng_zlib_decompressv &rArr; lodepng_inflatev &rArr; inflateHuffmanBlock &rArr; getTreeInflateDynamic &rArr; HuffmanTree_makeFromLengths &rArr; lodepng_malloc &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_resize
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_zlib_decompressv
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_zTXt
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iCCP
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[172]"></a>_get_convertor_string_width</STRONG> (Thumb, 494 bytes, Stack size 136 bytes, gt_font.o(i._get_convertor_string_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _get_convertor_string_width &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset_0
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_type_get
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_one_char_code_len_get
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_get_word_width_figure_up
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_get_size_length_by_style
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_convertor_data_get
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_code_transform
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_split
</UL>

<P><STRONG><a name="[174]"></a>_get_font_style</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, gt_font.o(i._get_font_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _get_font_style
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_is_style_cn_or_en
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_get_one_word_width
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_get_dot
</UL>

<P><STRONG><a name="[19f]"></a>_gt_font_lang_and_punctuation_split</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, gt_font.o(i._gt_font_lang_and_punctuation_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _gt_font_lang_and_punctuation_split &rArr; gt_font_one_char_code_len_get &rArr; _gt_gb_font_one_char_code_len_get
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_one_char_code_len_get
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_is_style_cn_or_en
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_punctuation
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_right_to_left_handler
</UL>

<P><STRONG><a name="[1a1]"></a>_gt_font_language_split</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, gt_font.o(i._gt_font_language_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _gt_font_language_split &rArr; gt_font_one_char_code_len_get &rArr; _gt_gb_font_one_char_code_len_get
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_one_char_code_len_get
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_is_style_cn_or_en
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_right_to_left_handler
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_split
</UL>

<P><STRONG><a name="[1a0]"></a>_is_punctuation</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gt_font.o(i._is_punctuation))
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_right_to_left_handler
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_font_split
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_font_lang_and_punctuation_split
</UL>

<P><STRONG><a name="[118]"></a>_calc_max_area_recursive</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, gt_hal_disp.o(i._calc_max_area_recursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = _calc_max_area_recursive &rArr;  _calc_max_area_recursive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_visible
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_update_max_area
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_virtual
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_is_ignore_calc_max_area
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_max_area_recursive
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_reload_max_area
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_max_area_recursive
</UL>

<P><STRONG><a name="[190]"></a>_gt_disp_area_get_idx</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gt_hal_disp.o(i._gt_disp_area_get_idx))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_append_area
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_get_area
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_area_pop
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_area_push
</UL>

<P><STRONG><a name="[183]"></a>_gt_disp_create</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, gt_hal_disp.o(i._gt_disp_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = _gt_disp_create &rArr; gt_obj_class_create &rArr; gt_layout_row_grow &rArr; _row_grow_inside_invert &rArr;  _row_grow_inside_invert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_virtual
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_screen_set_bgcolor
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_class_create
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_set_disp
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_drv_register
</UL>

<P><STRONG><a name="[88]"></a>_gt_disp_task_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gt_hal_disp.o(i._gt_disp_task_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _gt_disp_task_handler &rArr; gt_refr_timer &rArr; gt_disp_ref_area &rArr; _flush_scr_by_anim &rArr; _gt_disp_check_and_copy_foreach &rArr; _check_and_copy_foreach &rArr;  _check_and_copy_foreach (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_refr_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_hal_disp.o(i.gt_disp_drv_register)
</UL>
<P><STRONG><a name="[a3]"></a>_close_cb</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gt_hal_src.o(i._close_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _close_cb &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_hal_src.o(i.gt_src_init)
</UL>
<P><STRONG><a name="[a2]"></a>_open_cb</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, gt_hal_src.o(i._open_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _open_cb &rArr; _gt_hal_fp_init &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_hal_fp_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_hal_src.o(i.gt_src_init)
</UL>
<P><STRONG><a name="[a4]"></a>_read_cb</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, gt_hal_src.o(i._read_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _read_cb &rArr; gt_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_hal_src.o(i.gt_src_init)
</UL>
<P><STRONG><a name="[a5]"></a>_seek_cb</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gt_hal_src.o(i._seek_cb))
<BR>[Address Reference Count : 1]<UL><LI> gt_hal_src.o(i.gt_src_init)
</UL>
<P><STRONG><a name="[a6]"></a>_tell_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gt_hal_src.o(i._tell_cb))
<BR>[Address Reference Count : 1]<UL><LI> gt_hal_src.o(i.gt_src_init)
</UL>
<P><STRONG><a name="[a8]"></a>_close_cb</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gt_hal_vf.o(i._close_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _close_cb &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_hal_vf.o(i.gt_vf_init)
</UL>
<P><STRONG><a name="[a7]"></a>_open_cb</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, gt_hal_vf.o(i._open_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _open_cb &rArr; _gt_hal_fp_init &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_vf_get_drv
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_hal_fp_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_hal_vf.o(i.gt_vf_init)
</UL>
<P><STRONG><a name="[a9]"></a>_read_cb</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, gt_hal_vf.o(i._read_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _read_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_hal_vf.o(i.gt_vf_init)
</UL>
<P><STRONG><a name="[ab]"></a>_seek_cb</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gt_hal_vf.o(i._seek_cb))
<BR>[Address Reference Count : 1]<UL><LI> gt_hal_vf.o(i.gt_vf_init)
</UL>
<P><STRONG><a name="[ac]"></a>_tell_cb</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gt_hal_vf.o(i._tell_cb))
<BR>[Address Reference Count : 1]<UL><LI> gt_hal_vf.o(i.gt_vf_init)
</UL>
<P><STRONG><a name="[aa]"></a>_write_cb</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gt_hal_vf.o(i._write_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _write_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_hal_vf.o(i.gt_vf_init)
</UL>
<P><STRONG><a name="[177]"></a>_gt_anim_calc_path_by_bezier</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, gt_anim.o(i._gt_anim_calc_path_by_bezier))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _gt_anim_calc_path_by_bezier &rArr; gt_bezier3
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_map
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_bezier3
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_path_overshoot
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_path_ease_out
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_path_ease_in_out
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_path_ease_in
</UL>

<P><STRONG><a name="[17a]"></a>_gt_anim_change_list</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gt_anim.o(i._gt_anim_change_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _gt_anim_change_list &rArr; _gt_timer_set_paused &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_set_paused
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_is_ll_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_start
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_core_init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_free_task
</UL>

<P><STRONG><a name="[17f]"></a>_gt_anim_free_task</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gt_anim.o(i._gt_anim_free_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _gt_anim_free_task &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_change_list
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_start
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_del
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_ready_handler
</UL>

<P><STRONG><a name="[86]"></a>_gt_anim_path_bounce</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, gt_anim.o(i._gt_anim_path_bounce))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _gt_anim_path_bounce &rArr; gt_bezier3
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_map
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_bezier3
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_anim.o(i.gt_anim_set_path_type)
</UL>
<P><STRONG><a name="[82]"></a>_gt_anim_path_ease_in</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gt_anim.o(i._gt_anim_path_ease_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _gt_anim_path_ease_in &rArr; _gt_anim_calc_path_by_bezier &rArr; gt_bezier3
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_calc_path_by_bezier
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_anim.o(i.gt_anim_set_path_type)
</UL>
<P><STRONG><a name="[84]"></a>_gt_anim_path_ease_in_out</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gt_anim.o(i._gt_anim_path_ease_in_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _gt_anim_path_ease_in_out &rArr; _gt_anim_calc_path_by_bezier &rArr; gt_bezier3
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_calc_path_by_bezier
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_anim.o(i.gt_anim_set_path_type)
</UL>
<P><STRONG><a name="[83]"></a>_gt_anim_path_ease_out</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gt_anim.o(i._gt_anim_path_ease_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _gt_anim_path_ease_out &rArr; _gt_anim_calc_path_by_bezier &rArr; gt_bezier3
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_calc_path_by_bezier
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_anim.o(i.gt_anim_set_path_type)
</UL>
<P><STRONG><a name="[81]"></a>_gt_anim_path_linear</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gt_anim.o(i._gt_anim_path_linear))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gt_anim_path_linear &rArr; gt_map
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_map
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gt_anim.o(i.gt_anim_init)
<LI> gt_anim.o(i.gt_anim_set_path_type)
</UL>
<P><STRONG><a name="[85]"></a>_gt_anim_path_overshoot</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gt_anim.o(i._gt_anim_path_overshoot))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _gt_anim_path_overshoot &rArr; _gt_anim_calc_path_by_bezier &rArr; gt_bezier3
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_calc_path_by_bezier
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_anim.o(i.gt_anim_set_path_type)
</UL>
<P><STRONG><a name="[87]"></a>_gt_anim_path_step</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gt_anim.o(i._gt_anim_path_step))
<BR>[Address Reference Count : 1]<UL><LI> gt_anim.o(i.gt_anim_set_path_type)
</UL>
<P><STRONG><a name="[180]"></a>_gt_anim_ready_handler</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, gt_anim.o(i._gt_anim_ready_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _gt_anim_ready_handler &rArr; _gt_anim_free_task &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_free_task
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_task_handler
</UL>

<P><STRONG><a name="[79]"></a>_gt_anim_task_handler</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, gt_anim.o(i._gt_anim_task_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _gt_anim_task_handler &rArr; _gt_anim_ready_handler &rArr; _gt_anim_free_task &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tick_get
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_is_ll_empty
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_ready_handler
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tick_elapse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_anim.o(i._gt_anim_core_init)
</UL>
<P><STRONG><a name="[17b]"></a>_gt_gc_is_ll_empty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gt_anim.o(i._gt_gc_is_ll_empty))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_start
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_del
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_task_handler
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_change_list
</UL>

<P><STRONG><a name="[2ab]"></a>_gt_area_is_outside_area</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, gt_area.o(i._gt_area_is_outside_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _gt_area_is_outside_area
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_is_intersect_screen
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_cover_screen
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_intersect_screen
</UL>

<P><STRONG><a name="[31b]"></a>adjust_request_size</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gt_tlsf.o(i.adjust_request_size))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_realloc
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_malloc
</UL>

<P><STRONG><a name="[219]"></a>block_absorb</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gt_tlsf.o(i.block_absorb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = block_absorb &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_free
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
</UL>

<P><STRONG><a name="[227]"></a>block_can_split</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gt_tlsf.o(i.block_can_split))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_realloc
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
</UL>

<P><STRONG><a name="[21b]"></a>block_insert</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, gt_tlsf.o(i.block_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_realloc
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_free
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_add_pool
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
</UL>

<P><STRONG><a name="[21a]"></a>block_link_next</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gt_tlsf.o(i.block_link_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_add_pool
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_free
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_absorb
</UL>

<P><STRONG><a name="[21e]"></a>block_locate_free</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, gt_tlsf.o(i.block_locate_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = block_locate_free &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_fls
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_malloc
</UL>

<P><STRONG><a name="[222]"></a>block_mark_as_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gt_tlsf.o(i.block_mark_as_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_free
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
</UL>

<P><STRONG><a name="[223]"></a>block_mark_as_used</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gt_tlsf.o(i.block_mark_as_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = block_mark_as_used
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_realloc
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
</UL>

<P><STRONG><a name="[224]"></a>block_merge_next</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gt_tlsf.o(i.block_merge_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_remove
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_absorb
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_realloc
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_free
</UL>

<P><STRONG><a name="[21d]"></a>block_next</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gt_tlsf.o(i.block_next))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_realloc
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_used
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
</UL>

<P><STRONG><a name="[226]"></a>block_prepare_used</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gt_tlsf.o(i.block_prepare_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_used
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_can_split
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_malloc
</UL>

<P><STRONG><a name="[225]"></a>block_remove</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, gt_tlsf.o(i.block_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_free
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
</UL>

<P><STRONG><a name="[228]"></a>block_split</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, gt_tlsf.o(i.block_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_realloc
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
</UL>

<P><STRONG><a name="[220]"></a>gt_tlsf_ffs</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gt_tlsf.o(i.gt_tlsf_ffs))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
</UL>

<P><STRONG><a name="[21f]"></a>gt_tlsf_fls</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gt_tlsf.o(i.gt_tlsf_fls))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
</UL>

<P><STRONG><a name="[21c]"></a>mapping_insert</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gt_tlsf.o(i.mapping_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_fls
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_remove
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
</UL>

<P><STRONG><a name="[221]"></a>remove_free_block</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gt_tlsf.o(i.remove_free_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = remove_free_block
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_remove
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
</UL>

<P><STRONG><a name="[312]"></a>_get_item_top_by_index</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gt_stack.o(i._get_item_top_by_index))
<BR><BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_pop
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_peek_by
</UL>

<P><STRONG><a name="[ae]"></a>_deinit_cb</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gt_img.o(i._deinit_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _deinit_cb &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_img.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>_event_cb</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, gt_img.o(i._event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _event_cb &rArr; gt_event_send &rArr; _gt_event_send_kernel &rArr;  _gt_event_send_kernel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_read_img_wh
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_get_code
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_size_change
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_get_src
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_img.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>_init_cb</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, gt_img.o(i._init_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = _init_cb &rArr; draw_focus &rArr; draw_bg &rArr; gt_draw_blend &rArr; gt_draw_blend_with_rgb565_no_opacity &rArr; _blend_rgb565_with_no_opacity &rArr; gt_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_focus
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_img.o(.constdata)
</UL>
<P><STRONG><a name="[11e]"></a>_change_state_by_trigger_mode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gt_obj.o(i._change_state_by_trigger_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _change_state_by_trigger_mode &rArr; gt_obj_set_state &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_state
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_trigger_mode
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_event_cb
</UL>

<P><STRONG><a name="[b0]"></a>_init_cb</STRONG> (Thumb, 332 bytes, Stack size 64 bytes, gt_obj.o(i._init_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = _init_cb &rArr; draw_bg &rArr; gt_draw_blend &rArr; gt_draw_blend_with_rgb565_no_opacity &rArr; _blend_rgb565_with_no_opacity &rArr; gt_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_reduce
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_graph_init_rect_attr
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_state
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_septal_line
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_mask_effect
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_show_bg
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_color_hex
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_reduce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_obj.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>_obj_event_cb</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, gt_obj.o(i._obj_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _obj_event_cb &rArr; gt_event_send &rArr; _gt_event_send_kernel &rArr;  _gt_event_send_kernel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_get_code
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_mask_effect
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unmasked_effect_handler
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_change_state_by_trigger_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_obj.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>_screen_event_cb</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, gt_obj.o(i._screen_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _screen_event_cb &rArr; gt_obj_scroll_to_y &rArr; gt_obj_scroll_to &rArr; gt_anim_start &rArr; _gt_anim_free_task &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_res_ver
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_res_hor
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_get_code
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_scroll_to_y
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_scroll_to_x
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_screen_scroll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_obj.o(.constdata)
</UL>
<P><STRONG><a name="[200]"></a>_screen_scroll</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, gt_obj.o(i._screen_scroll))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _screen_scroll &rArr; gt_disp_scroll_area_act &rArr; _gt_disp_refr_append_area &rArr; gt_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_res_ver
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_res_hor
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_scroll_area_act
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_area_max
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_area_act
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_type
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_screen_event_cb
</UL>

<P><STRONG><a name="[1ef]"></a>_unmasked_effect_handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gt_obj.o(i._unmasked_effect_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _unmasked_effect_handler &rArr; gt_disp_invalid_area &rArr; _gt_disp_refr_append_area &rArr; gt_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_mask_effect
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_event_cb
</UL>

<P><STRONG><a name="[1e6]"></a>gt_area_reduce</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gt_obj.o(i.gt_area_reduce))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_area_reduce
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_cb
</UL>

<P><STRONG><a name="[1e9]"></a>gt_color_hex</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gt_obj.o(i.gt_color_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gt_color_hex &rArr; gt_color_make
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_cb
</UL>

<P><STRONG><a name="[2af]"></a>gt_color_make</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gt_obj.o(i.gt_color_make))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_screen_get_bgcolor
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_color_hex
</UL>

<P><STRONG><a name="[10e]"></a>_add_obj_to_parent</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gt_obj_class.o(i._add_obj_to_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _add_obj_to_parent &rArr; _mem_realloc &rArr; gt_tlsf_realloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_realloc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_class_create
</UL>

<P><STRONG><a name="[13c]"></a>_create_new_screen_obj</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, gt_obj_class.o(i._create_new_screen_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _create_new_screen_obj &rArr; _mem_realloc &rArr; gt_tlsf_realloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_res_ver
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_res_hor
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_default
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_realloc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_class_create
</UL>

<P><STRONG><a name="[143]"></a>_destroy_and_free_children</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, gt_obj_class.o(i._destroy_and_free_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + In Cycle
<LI>Call Chain = _destroy_and_free_children &rArr;  _destroy_and_free_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_destroy_self
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_destroy_and_free_children
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_destroy
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_destroy_and_free_children
</UL>

<P><STRONG><a name="[1b9]"></a>_gt_obj_class_destroy_from_parent</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, gt_obj_class.o(i._gt_obj_class_destroy_from_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _gt_obj_class_destroy_from_parent &rArr; _mem_realloc &rArr; gt_tlsf_realloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memmove
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_destroy
</UL>

<P><STRONG><a name="[1bb]"></a>_gt_obj_class_destroy_property</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, gt_obj_class.o(i._gt_obj_class_destroy_property))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _gt_obj_class_destroy_property &rArr; gt_event_send &rArr; _gt_event_send_kernel &rArr;  _gt_event_send_kernel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_indev_remove_want_delate_target
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_destroy_self
</UL>

<P><STRONG><a name="[1ba]"></a>_gt_obj_class_destroy_screen</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, gt_obj_class.o(i._gt_obj_class_destroy_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _gt_obj_class_destroy_screen &rArr; _mem_realloc &rArr; gt_tlsf_realloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memmove
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_default
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_destroy
</UL>

<P><STRONG><a name="[144]"></a>_gt_obj_class_destroy_self</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gt_obj_class.o(i._gt_obj_class_destroy_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _gt_obj_class_destroy_self &rArr; _gt_obj_class_destroy_property &rArr; gt_event_send &rArr; _gt_event_send_kernel &rArr;  _gt_event_send_kernel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_destroy_property
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_destroy
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_destroy_and_free_children
</UL>

<P><STRONG><a name="[b4]"></a>_deinit_cb</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gt_textarea.o(i._deinit_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _deinit_cb &rArr; _free_contents &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_contents
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_textarea.o(.constdata)
</UL>
<P><STRONG><a name="[148]"></a>_draw_content_or_get_words</STRONG> (Thumb, 290 bytes, Stack size 96 bytes, gt_textarea.o(i._draw_content_or_get_words))
<BR><BR>[Stack]<UL><LI>Max Depth = 1796<LI>Call Chain = _draw_content_or_get_words &rArr; draw_text &rArr; draw_text_single_line &rArr; _draw_text_convertor_split &rArr; gt_font_get_one_word_width &rArr; GT_Get_Font_Width &rArr; get_vec_font_width &rArr; get_font &rArr; Draw_hz &rArr; getBhDetailData &rArr; bending &rArr; BSpline
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_text
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_reduce
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_cb
</UL>

<P><STRONG><a name="[b5]"></a>_event_cb</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, gt_textarea.o(i._event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _event_cb &rArr; gt_event_send &rArr; _gt_event_send_kernel &rArr;  _gt_event_send_kernel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_abs
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_get_code
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_textarea.o(.constdata)
</UL>
<P><STRONG><a name="[142]"></a>_free_contents</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, gt_textarea.o(i._free_contents))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _free_contents &rArr; _mem_free &rArr; gt_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deinit_cb
</UL>

<P><STRONG><a name="[b3]"></a>_init_cb</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, gt_textarea.o(i._init_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1852<LI>Call Chain = _init_cb &rArr; _draw_content_or_get_words &rArr; draw_text &rArr; draw_text_single_line &rArr; _draw_text_convertor_split &rArr; gt_font_get_one_word_width &rArr; GT_Get_Font_Width &rArr; get_vec_font_width &rArr; get_font &rArr; Draw_hz &rArr; getBhDetailData &rArr; bending &rArr; BSpline
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_reduce
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_graph_init_rect_attr
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_focus
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_reduce
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_content_or_get_words
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_textarea.o(.constdata)
</UL>
<P><STRONG><a name="[149]"></a>gt_area_reduce</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gt_textarea.o(i.gt_area_reduce))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_area_reduce
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_cb
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_content_or_get_words
</UL>

<P><STRONG><a name="[317]"></a>gt_color_make</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gt_textarea.o(i.gt_color_make))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_textarea_create
</UL>

<P><STRONG><a name="[165]"></a>_find_showing_recursive_by_type</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, gt_dialog.o(i._find_showing_recursive_by_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = _find_showing_recursive_by_type &rArr;  _find_showing_recursive_by_type (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_visible
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_type
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_find_showing_recursive_by_type
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_dialog_has_showing
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_find_showing_recursive_by_type
</UL>

<P><STRONG><a name="[2dc]"></a>gt_color_hex</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gt_init_screen_home.o(i.gt_color_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init_screen_home
</UL>

<P><STRONG><a name="[235]"></a>check_fs</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_write_disk &rArr; sd_mult_blocks_write &rArr; sdio_command_data_send &rArr; sd_init &rArr; speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[29b]"></a>clmt_clust</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ff.o(i.clmt_clust))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[27a]"></a>clst2sect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.clst2sect))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[24b]"></a>create_chain</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_write_disk &rArr; sd_mult_blocks_write &rArr; sdio_command_data_send &rArr; sd_init &rArr; speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[250]"></a>create_name</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = create_name
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[252]"></a>create_partition</STRONG> (Thumb, 302 bytes, Stack size 56 bytes, ff.o(i.create_partition))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = create_partition &rArr; disk_write &rArr; sd_write_disk &rArr; sd_mult_blocks_write &rArr; sdio_command_data_send &rArr; sd_init &rArr; speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[278]"></a>dir_clear</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ff.o(i.dir_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = dir_clear &rArr; sync_window &rArr; disk_write &rArr; sd_write_disk &rArr; sd_mult_blocks_write &rArr; sdio_command_data_send &rArr; sd_init &rArr; speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[27b]"></a>dir_next</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_write_disk &rArr; sd_mult_blocks_write &rArr; sdio_command_data_send &rArr; sd_init &rArr; speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[27c]"></a>dir_register</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = dir_register &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_write_disk &rArr; sd_mult_blocks_write &rArr; sdio_command_data_send &rArr; sd_init &rArr; speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[27d]"></a>dir_sdi</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_write_disk &rArr; sd_mult_blocks_write &rArr; sdio_command_data_send &rArr; sd_init &rArr; speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[297]"></a>follow_path</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_write_disk &rArr; sd_mult_blocks_write &rArr; sdio_command_data_send &rArr; sd_init &rArr; speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[24c]"></a>get_fat</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_write_disk &rArr; sd_mult_blocks_write &rArr; sdio_command_data_send &rArr; sd_init &rArr; speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[294]"></a>get_ldnumber</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[298]"></a>ld_clust</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[238]"></a>ld_dword</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ff.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[237]"></a>ld_word</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ff.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[296]"></a>mount_volume</STRONG> (Thumb, 578 bytes, Stack size 40 bytes, ff.o(i.mount_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = mount_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_write_disk &rArr; sd_mult_blocks_write &rArr; sdio_command_data_send &rArr; sd_init &rArr; speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[236]"></a>move_window</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; sd_write_disk &rArr; sd_mult_blocks_write &rArr; sdio_command_data_send &rArr; sd_init &rArr; speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[24d]"></a>put_fat</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_write_disk &rArr; sd_mult_blocks_write &rArr; sdio_command_data_send &rArr; sd_init &rArr; speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[29a]"></a>remove_chain</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_write_disk &rArr; sd_mult_blocks_write &rArr; sdio_command_data_send &rArr; sd_init &rArr; speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[299]"></a>st_clust</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ff.o(i.st_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[254]"></a>st_dword</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
</UL>

<P><STRONG><a name="[255]"></a>st_word</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ff.o(i.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
</UL>

<P><STRONG><a name="[29c]"></a>sync_fs</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; sd_write_disk &rArr; sd_mult_blocks_write &rArr; sdio_command_data_send &rArr; sd_init &rArr; speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[279]"></a>sync_window</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = sync_window &rArr; disk_write &rArr; sd_write_disk &rArr; sd_mult_blocks_write &rArr; sdio_command_data_send &rArr; sd_init &rArr; speed_change &rArr; sd_switch &rArr;  sdio_command_data_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[292]"></a>validate</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[cd]"></a>ASCII_GB18030</STRONG> (Thumb, 374 bytes, Stack size 0 bytes, gt_gui_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeToNo
</UL>

<P><STRONG><a name="[e2]"></a>BSpline</STRONG> (Thumb, 880 bytes, Stack size 268 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = BSpline
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bending
</UL>

<P><STRONG><a name="[e0]"></a>ClearScanData</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ClearScanData &rArr; ScanColumn
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanColumn
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillBuffer
</UL>

<P><STRONG><a name="[cc]"></a>Draw_fh</STRONG> (Thumb, 262 bytes, Stack size 64 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1092<LI>Call Chain = Draw_fh &rArr; getBhDetailData &rArr; bending &rArr; BSpline
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBhDetailData
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillBuffer
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dat_bat
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_font_st
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_font
</UL>

<P><STRONG><a name="[cb]"></a>Draw_hz</STRONG> (Thumb, 592 bytes, Stack size 104 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1132<LI>Call Chain = Draw_hz &rArr; getBhDetailData &rArr; bending &rArr; BSpline
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBhDetailData
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillBuffer
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dat_bat
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_font_st
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_font
</UL>

<P><STRONG><a name="[de]"></a>InternalPixlateData</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = InternalPixlateData &rArr; ScanLine
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanLine
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillBuffer
</UL>

<P><STRONG><a name="[ca]"></a>LoadFontAddr</STRONG> (Thumb, 274 bytes, Stack size 48 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LoadFontAddr &rArr; r_dat_bat &rArr; spiflash_read &rArr; spi_bytes_read
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dat_bat
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_font_st
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_font
</UL>

<P><STRONG><a name="[da]"></a>MD5Decode</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gt_gui_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
</UL>

<P><STRONG><a name="[c3]"></a>MD5Encode</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MD5Encode
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
</UL>

<P><STRONG><a name="[bf]"></a>MD5Final</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = MD5Final &rArr; MD5Update &rArr; MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Encode
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_Font_Init
</UL>

<P><STRONG><a name="[bd]"></a>MD5Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MD5Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_Font_Init
</UL>

<P><STRONG><a name="[c2]"></a>MD5Transform</STRONG> (Thumb, 1864 bytes, Stack size 360 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
</UL>

<P><STRONG><a name="[be]"></a>MD5Update</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = MD5Update &rArr; MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_Font_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
</UL>

<P><STRONG><a name="[df]"></a>MaskBitmap</STRONG> (Thumb, 670 bytes, Stack size 64 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MaskBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillBuffer
</UL>

<P><STRONG><a name="[e1]"></a>PatchBitmap</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PatchBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillBuffer
</UL>

<P><STRONG><a name="[e5]"></a>ScanColumn</STRONG> (Thumb, 1288 bytes, Stack size 112 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ScanColumn
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScanData
</UL>

<P><STRONG><a name="[70]"></a>ScanDownLeft</STRONG> (Thumb, 134 bytes, Stack size 28 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ScanDownLeft
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_gui_driver.o(.text)
</UL>
<P><STRONG><a name="[74]"></a>ScanDownLeft_V</STRONG> (Thumb, 140 bytes, Stack size 28 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ScanDownLeft_V
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_gui_driver.o(.text)
</UL>
<P><STRONG><a name="[6f]"></a>ScanDownRight</STRONG> (Thumb, 134 bytes, Stack size 28 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ScanDownRight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_gui_driver.o(.text)
</UL>
<P><STRONG><a name="[73]"></a>ScanDownRight_V</STRONG> (Thumb, 136 bytes, Stack size 28 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ScanDownRight_V
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_gui_driver.o(.text)
</UL>
<P><STRONG><a name="[e3]"></a>ScanLine</STRONG> (Thumb, 1228 bytes, Stack size 112 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ScanLine
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalPixlateData
</UL>

<P><STRONG><a name="[71]"></a>ScanUpperLeft</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ScanUpperLeft
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_gui_driver.o(.text)
</UL>
<P><STRONG><a name="[75]"></a>ScanUpperLeft_V</STRONG> (Thumb, 138 bytes, Stack size 28 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ScanUpperLeft_V
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_gui_driver.o(.text)
</UL>
<P><STRONG><a name="[72]"></a>ScanUpperRight</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ScanUpperRight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_gui_driver.o(.text)
</UL>
<P><STRONG><a name="[76]"></a>ScanUpperRight_V</STRONG> (Thumb, 138 bytes, Stack size 28 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ScanUpperRight_V
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_gui_driver.o(.text)
</UL>
<P><STRONG><a name="[c4]"></a>Unicode_to_xxxx_vec</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Unicode_to_xxxx_vec &rArr; UnicodeToGBK &rArr; r_dat_bat &rArr; spiflash_read &rArr; spi_bytes_read
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnicodeToGBK
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_Get_Chinese_Charset_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_GetVec
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vec_font_width
</UL>

<P><STRONG><a name="[dc]"></a>bending</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = bending &rArr; BSpline
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSpline
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBhDetailData
</UL>

<P><STRONG><a name="[c8]"></a>codeToNo</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = codeToNo
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCII_GB18030
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_font_st
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_font
</UL>

<P><STRONG><a name="[db]"></a>curvatureCal</STRONG> (Thumb, 548 bytes, Stack size 64 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = curvatureCal
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBhDetailData
</UL>

<P><STRONG><a name="[d0]"></a>fillBuffer</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = fillBuffer &rArr; ClearScanData &rArr; ScanColumn
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatchBitmap
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaskBitmap
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalPixlateData
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScanData
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_hz
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_fh
</UL>

<P><STRONG><a name="[cf]"></a>getBhDetailData</STRONG> (Thumb, 1830 bytes, Stack size 704 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1028<LI>Call Chain = getBhDetailData &rArr; bending &rArr; BSpline
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curvatureCal
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bending
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dat_bat
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_hz
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_fh
</UL>

<P><STRONG><a name="[d6]"></a>get_vec_font_width</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1204<LI>Call Chain = get_vec_font_width &rArr; get_font &rArr; Draw_hz &rArr; getBhDetailData &rArr; bending &rArr; BSpline
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_width_func_vec
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_font
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unicode_to_xxxx_vec
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_Get_Font_Width
</UL>

<P><STRONG><a name="[dd]"></a>linear</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = linear
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBhDetailData
</UL>

<P><STRONG><a name="[c9]"></a>selectAddr</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gt_gui_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_font_st
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_font
</UL>

<P><STRONG><a name="[16c]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[10d]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[1f3]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1f2]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
